{
    "componentChunkName": "component---src-pages-structure-js",
    "path": "/structure/",
    "result": {"data":{"misconceptions":{"nodes":[{"fields":{"slug":"/misconceptions/Java/AbstractClassMustImplementAbstractMethod/","name":"AbstractClassMustImplementAbstractMethod","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Inheritance","Implementation"],"shortDescription":"An abstract class must implement all abstract methods defined in its superclass","shortCorrection":"An abstract class does not need to implement all abstract methods defined in its superclass","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/AbstractClassNoImplementation/","name":"AbstractClassNoImplementation","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Inheritance"],"shortDescription":"An abstract class cannot contain implemented methods","shortCorrection":"An abstract class can also contain implemented methods","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/AddMemberAtRuntime/","name":"AddMemberAtRuntime","pl":"Java","image":{"relativePath":"misconceptions/Java/AddMemberAtRuntime/image.jpg"},"correction":{"size":505},"origin":{"size":193},"symptoms":{"size":527},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Class","Method","Field","Allocation"],"shortDescription":"Set of class members can change at runtime","shortCorrection":"Set of class members stays fixed at runtime","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ArraysGrow","relation":"similar, for arrays instead of objects"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/AllClassesHaveDefaultConstructor/","name":"AllClassesHaveDefaultConstructor","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":83},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Constructor"],"shortDescription":"All classes automatically get a no-argument constructor","shortCorrection":"Only classes without constructor automatically get a no-argument constructor","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/AnyClassException/","name":"AnyClassException","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":455},"origin":{"size":254},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","Class"],"shortDescription":"Any class can be an exception class","shortCorrection":"Exceptions are subtypes of Throwable","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArithmeticPlusPrecedes/","name":"ArithmeticPlusPrecedes","pl":"Java","image":{"relativePath":"misconceptions/Java/ArithmeticPlusPrecedes/image.jpg"},"correction":{"size":2454},"origin":{"size":272},"symptoms":{"size":0},"value":{"size":944}},"frontmatter":{"status":"public","concepts":["String","Expression","Operator","Precedence","Associativity"],"shortDescription":"Addition has higher precedence than string concatenation","shortCorrection":"Addition and string concatenation have same precedence","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ArrayAccessWithParentheses/","name":"ArrayAccessWithParentheses","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Operator"],"shortDescription":"Parentheses are used to access an element in an array","shortCorrection":"Square brackets are used to access an element in an array","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayAllocationWithoutNew/","name":"ArrayAllocationWithoutNew","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":571},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Allocation"],"shortDescription":"Arrays are created without the new keyword","shortCorrection":"All arrays are allocated on the heap with new","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ArrayBracketCountIsLength/","name":"ArrayBracketCountIsLength","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":442},"origin":{"size":0},"symptoms":{"size":699},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Allocation"],"shortDescription":"The number of brackets in an array type or an array initializer corresponds to the length of the array","shortCorrection":"The number of brackets in an array type or an array initializer corresponds to the rank of the array","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ArrayRankIsLength","relation":"Underlying concepts"},{"id":"ArrayElementTypeRepeats","relation":"Related"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayElementTypeRepeats/","name":"ArrayElementTypeRepeats","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":241},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Type"],"shortDescription":"The type of a multi-dimensional array is written as T[] T[] T[]","shortCorrection":"The type of a multi-dimensional array is written as T[][][]","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ArrayBracketCountIsLength","relation":"Related"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayElementsUntyped/","name":"ArrayElementsUntyped","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":278},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Type"],"shortDescription":"Elements of arrays are untyped","shortCorrection":"The type of an array specifies the type of the elements","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ListsHomogeneous"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayHasLengthMethod/","name":"ArrayHasLengthMethod","pl":"Java","image":{"relativePath":"misconceptions/Java/ArrayHasLengthMethod/image.jpg"},"correction":{"size":262},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":724}},"frontmatter":{"status":"public","concepts":["Array","Method","Field"],"shortDescription":"To get the length of an array, one needs to call its length method","shortCorrection":"To get the length of an array, one needs to read its length field","observed":null,"pytamaroActivityVersion":null,"videoId":"NdOvs982VhI","related":[{"id":"ArrayListIsArray","relation":"If arrays are ArrayLists, they have such methods"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ArrayInitializerContentsInBrackets/","name":"ArrayInitializerContentsInBrackets","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":665},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Literal"],"shortDescription":"Array initializers list the elements in square brackets","shortCorrection":"Array initializers list the elements in curly braces","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayLengthCannotBeZero/","name":"ArrayLengthCannotBeZero","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":234},"origin":{"size":141},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array"],"shortDescription":"An array cannot have a length of 0 elements","shortCorrection":"An array can have a length of 0 elements","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ListLengthCannotBeZero"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayLengthPartOfType/","name":"ArrayLengthPartOfType","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":811},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Type"],"shortDescription":"The length of an array is part of its type","shortCorrection":"The length of an array is not part of its type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ArrayRankNotPartOfType","relation":"Similar"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayListIsArray/","name":"ArrayListIsArray","pl":"Java","image":{"relativePath":"misconceptions/Java/ArrayListIsArray/image.jpg"},"correction":{"size":861},"origin":{"size":322},"symptoms":{"size":0},"value":{"size":794}},"frontmatter":{"status":"public","concepts":["Array","Class"],"shortDescription":"ArrayLists are arrays","shortCorrection":"ArrayLists and arrays are different things","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ArrayHasLengthMethod","relation":"If arrays are ArrayLists, they have such methods"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayRankIsLength/","name":"ArrayRankIsLength","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1164},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array"],"shortDescription":"Array rank and array length are the same thing","shortCorrection":"Array rank and array length are different concepts","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ArrayBracketCountIsLength","relation":"Specific manifestation"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArrayRankNotPartOfType/","name":"ArrayRankNotPartOfType","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":425},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Type"],"shortDescription":"The rank of an array is not part of its type","shortCorrection":"The rank of an array is part of its type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ArrayLengthPartOfType","relation":"Similar"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ArraysGrow/","name":"ArraysGrow","pl":"Java","image":{"relativePath":"misconceptions/Java/ArraysGrow/image.jpg"},"correction":{"size":1099},"origin":{"size":152},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Array","Allocation"],"shortDescription":"Arrays can grow dynamically","shortCorrection":"The length of an array is fixed and is determined at allocation","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"AddMemberAtRuntime","relation":"similar, for objects instead of arrays"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/AssignCompares/","name":"AssignCompares","pl":"Java","image":{"relativePath":"misconceptions/Java/AssignCompares/image.jpg"},"correction":{"size":474},"origin":{"size":122},"symptoms":{"size":224},"value":{"size":200}},"frontmatter":{"status":"public","concepts":["Assignment","Equality","Expression","Operator"],"shortDescription":"= compares two values","shortCorrection":"= assigns a value to a variable","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"EqualityOperatorComparesObjectsValues","relation":"About comparison `==` (but about reference vs. value)"},{"id":"AssignmentCopiesObject","relation":"About assignment `=` (but about reference vs. value)"}],"inOtherPl":[{"id":"AssignCompares"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"Java","image":{"relativePath":"misconceptions/Java/AssignmentCopiesObject/image.jpg"},"correction":{"size":758},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":115}},"frontmatter":{"status":"public","concepts":["Assignment","Variable","Object","Reference"],"shortDescription":"Assignment copies the object","shortCorrection":"Assignment copies the reference pointing to the object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"EqualityOperatorComparesObjectsValues","relation":"Parallel (also about reference vs. value)"},{"id":"VariablesHoldObjects","relation":"Possible cause"},{"id":"AssignCompares","relation":"A deeper misconception about assignment"}],"inOtherPl":[{"id":"AssignmentCopiesObject"},{"id":"AssignmentCopiesObject"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/AssignmentNotExpression/","name":"AssignmentNotExpression","pl":"Java","image":{"relativePath":"misconceptions/Java/AssignmentNotExpression/image.jpg"},"correction":{"size":1932},"origin":{"size":89},"symptoms":{"size":0},"value":{"size":629}},"frontmatter":{"status":"public","concepts":["Expression","Operator","Assignment"],"shortDescription":"An assignment a=b is not an expression","shortCorrection":"An assignment a=b is an expression and thus produces a value","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/BaseCaseNotNeeded/","name":"BaseCaseNotNeeded","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1298},"origin":{"size":0},"symptoms":{"size":543},"value":{"size":2460}},"frontmatter":{"status":"draft","concepts":["Recursion","Method","Conditional","Call"],"shortDescription":"Recursive computations do not necessarily need a base case","shortCorrection":"Recursive computations need a base case to terminate","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"BaseCaseSelfRecursive","relation":null}],"inOtherPl":[{"id":"BaseCaseNotNeeded"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/BaseCaseSelfRecursive/","name":"BaseCaseSelfRecursive","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":615},"origin":{"size":0},"symptoms":{"size":1907},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Recursion","Method","Call"],"shortDescription":"The base case of a structural recursion consists of a recursive self-call","shortCorrection":"The base case of a structural recursion does not perform a recursive call","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"BaseCaseNotNeeded","relation":null}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CallNotStaticallyChecked/","name":"CallNotStaticallyChecked","pl":"Java","image":{"relativePath":"misconceptions/Java/CallNotStaticallyChecked/image.jpg"},"correction":{"size":1525},"origin":{"size":154},"symptoms":{"size":0},"value":{"size":155}},"frontmatter":{"status":"public","concepts":["Method","Call","Class","Subtyping"],"shortDescription":"A method invocation on a reference of a type that does not have that method won't compile","shortCorrection":"A method invocation on a reference of a type that does not have that method will compile","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CallOnPrimitive/","name":"CallOnPrimitive","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":364},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call","Primitive"],"shortDescription":"One can invoke a method on primitive values","shortCorrection":"One cannot invoke methods on primitive values","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CallRequiresVariable/","name":"CallRequiresVariable","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":574},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call"],"shortDescription":"One needs a variable to invoke a method","shortCorrection":"Methods can be invoked on expressions that evaluate to a suitable object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":"VariableInlined"}]}},{"fields":{"slug":"/misconceptions/Java/CallWithoutFrame/","name":"CallWithoutFrame","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":739},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call","Stack"],"shortDescription":"A method invocation does not necessarily allocate a stack frame","shortCorrection":"Each method invocation allocates a new stack frame","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CallerFrameContainsCalleeFormal/","name":"CallerFrameContainsCalleeFormal","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":330},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call","Stack","Variable","Parameter"],"shortDescription":"Stack frame of caller includes variables for callee's formal parameters","shortCorrection":"Stack frame of caller does not include variables for callee's formal parameters","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CannotChainMemberAccesses/","name":"CannotChainMemberAccesses","pl":"Java","image":{"relativePath":"misconceptions/Java/CannotChainMemberAccesses/image.jpg"},"correction":{"size":1263},"origin":{"size":455},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Method","Call","Field","Member","Expression","Operator"],"shortDescription":"Member accesses cannot be chained together","shortCorrection":"Member accesses can be chained together","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ObjectsMustBeNamed","relation":"If objects are named, there can be a name before a dot"},{"id":"CannotChainMemberToConstructor","relation":"Another primary in front of the dot"},{"id":"RightToLeftChaining","relation":"Direction of evaluation"}],"inOtherPl":[{"id":"CannotChainAttributeAccesses"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CannotChainMemberToConstructor/","name":"CannotChainMemberToConstructor","pl":"Java","image":{"relativePath":"misconceptions/Java/CannotChainMemberToConstructor/image.jpg"},"correction":{"size":1397},"origin":{"size":758},"symptoms":{"size":0},"value":{"size":230}},"frontmatter":{"status":"public","concepts":["Method","Field","Member","Constructor","Call","Expression","Operator"],"shortDescription":"Method calls or field accesses cannot be chained to a constructor invocation","shortCorrection":"Method calls or field accesses can be chained to a constructor invocation","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ObjectsMustBeNamed","relation":"If objects are named, methods called on a name"},{"id":"CannotChainMemberAccesses","relation":"Another primary in front of the dot"},{"id":"RightToLeftChaining","relation":"Direction of evaluation"}],"inOtherPl":[{"id":"CannotChainMemberToClassInstantiation"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CatchAlwaysExecutes/","name":"CatchAlwaysExecutes","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":854},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","ControlFlow"],"shortDescription":"Catch blocks always get executed","shortCorrection":"Catch blocks only get executed if an exception is thrown in the try block","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CatchProvidesOptions/","name":"CatchProvidesOptions","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":409},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","ControlFlow"],"shortDescription":"Only the part of a catch block necessary to fix the cause of an exception is executed","shortCorrection":"When an exception is caught, all statements in the corresponding catch block execute","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ChainedMethodsNotCalledFromOutside/","name":"ChainedMethodsNotCalledFromOutside","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call","Expression","Object"],"shortDescription":"Chained methods are all called on the object at the beginning of the chain","shortCorrection":"Chained methods are called on the object that results from the previous call in the chain","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/CharNotNumeric/","name":"CharNotNumeric","pl":"Java","image":{"relativePath":"misconceptions/Java/CharNotNumeric/image.jpg"},"correction":{"size":151},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":978}},"frontmatter":{"status":"public","concepts":["Number","String","Type"],"shortDescription":"Char is not a numeric type","shortCorrection":"Char is a numeric type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ComparisonWithBooleanLiteral/","name":"ComparisonWithBooleanLiteral","pl":"Java","image":{"relativePath":"misconceptions/Java/ComparisonWithBooleanLiteral/image.jpg"},"correction":{"size":3137},"origin":{"size":1573},"symptoms":{"size":1154},"value":{"size":419}},"frontmatter":{"status":"public","concepts":["Boolean","Expression","Operator","Equality"],"shortDescription":"To test whether an expression is true or false, one must compare it to true or to false","shortCorrection":"To test whether an expression is true or false, one can just use it","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MapToBooleanWithConditionalOperator","relation":"Similar detour (via conditional operator)"},{"id":"MapToBooleanWithIf","relation":"Similar detour (via if statement)"},{"id":"NoAtomicExpression","relation":"Is a variable name alone an expression"},{"id":"ReturnCall","relation":"When used in return statement"}],"inOtherPl":[{"id":"ComparisonWithBoolLiteral"},{"id":"CompareBooleanToConstant"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/CompositeExpressionsUntyped/","name":"CompositeExpressionsUntyped","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":337},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":1372}},"frontmatter":{"status":"draft","concepts":["Type","Expression"],"shortDescription":"Expressions that consist of multiple parts have no type","shortCorrection":"Expressions that consist of multiple parts have a type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoAtomicExpression","relation":"Related"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassMustOverride/","name":"ConcreteClassMustOverride","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":367},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Method","Inheritance"],"shortDescription":"A concrete class needs to implement all abstract methods and override all concrete methods declared in its abstract superclasses","shortCorrection":"A concrete class does not necessarily need to override concrete methods declared in its abstract superclasses","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls13"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementClassAbstract/","name":"ConcreteClassOnlyImplementClassAbstract","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":108},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Method","Subtyping","Inheritance"],"shortDescription":"A concrete class only needs to implement those abstract methods it inherits from abstract superclasses","shortCorrection":"A concrete class needs to implement both the abstract methods it inherits from abstract superclasses and those declared in the interfaces it implements","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ConcreteClassOnlyImplementInterfaceAbstract","relation":"Dual"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementDirectAbstract/","name":"ConcreteClassOnlyImplementDirectAbstract","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":234},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Method","Subtyping","Inheritance"],"shortDescription":"A concrete class only needs to implement abstract methods declared in its direct supertypes","shortCorrection":"A concrete class needs to implement all abstract methods declared in its supertypes, both direct and indirect","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementInterfaceAbstract/","name":"ConcreteClassOnlyImplementInterfaceAbstract","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":114},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Method","Subtyping","Inheritance"],"shortDescription":"A concrete class only needs to implement those abstract methods it inherits from interfaces","shortCorrection":"A concrete class needs to implement both the abstract methods it inherits from interfaces and those declared in the abstract class it extends","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ConcreteClassOnlyImplementClassAbstract","relation":"Dual"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ConditionalIsSequence/","name":"ConditionalIsSequence","pl":"Java","image":{"relativePath":"misconceptions/Java/ConditionalIsSequence/image.jpg"},"correction":{"size":1066},"origin":{"size":260},"symptoms":{"size":117},"value":{"size":986}},"frontmatter":{"status":"public","concepts":["Conditional","ControlFlow"],"shortDescription":"If-else is equivalent to sequence of two ifs","shortCorrection":"If-else can behave differently from sequence of two ifs","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ElsIf","relation":"If as set of cases"},{"id":"ElseAlwaysExecutes","relation":"Similar"},{"id":"IfRequiresElse","relation":"If as two cases"}],"inOtherPl":[{"id":"ConditionalIsSequence"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ConstructorAllocates/","name":"ConstructorAllocates","pl":"Java","image":{"relativePath":"misconceptions/Java/ConstructorAllocates/image.jpg"},"correction":{"size":501},"origin":{"size":0},"symptoms":{"size":239},"value":{"size":1556}},"frontmatter":{"status":"public","concepts":["Allocation","Constructor","Call"],"shortDescription":"The constructor allocates the object","shortCorrection":"The constructor does not allocate the object, it just initializes it","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoEmptyConstructor","relation":"More general"},{"id":"ConstructorReturnsObject","relation":"Maybe"},{"id":"ThisAssignable","relation":"Maybe"}],"inOtherPl":[{"id":"InitCreates"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ConstructorParameterIsField/","name":"ConstructorParameterIsField","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":248},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Constructor","Parameter","Field"],"shortDescription":"Formal constructor parameters are equivalent to instance variables","shortCorrection":"Formal constructor parameters are completely separate from instance variables","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ImmutableRequiresFinalParameters","relation":"Possible consequence"},{"id":"MustInitializeFieldInConstructor","relation":"Connection between parameters and fields"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ConstructorReturnsObject/","name":"ConstructorReturnsObject","pl":"Java","image":{"relativePath":"misconceptions/Java/ConstructorReturnsObject/image.jpg"},"correction":{"size":142},"origin":{"size":532},"symptoms":{"size":162},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Allocation","Constructor","Call","Return"],"shortDescription":"Constructors need to return objects","shortCorrection":"Constructors cannot return anything","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoEmptyConstructor","relation":"More general"},{"id":"ConstructorAllocates","relation":"Maybe"},{"id":"ThisAssignable","relation":"Maybe"}],"inOtherPl":[{"id":"InitReturnsObject"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ConstructorWithoutNew/","name":"ConstructorWithoutNew","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":620},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Constructor","Call","Allocation"],"shortDescription":"One can write the constructor name, without new, to instantiate a class","shortCorrection":"The constructor name needs to come after the keyword new to instantiate a class","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ControlledLocalAccess/","name":"ControlledLocalAccess","pl":"Java","image":{"relativePath":"misconceptions/Java/ControlledLocalAccess/image.jpg"},"correction":{"size":407},"origin":{"size":0},"symptoms":{"size":445},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Variable","Scope","Lifetime","AccessModifier"],"shortDescription":"One can control access to local variables using access modifiers","shortCorrection":"One cannot control access to local variables","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/DeferredReturn/","name":"DeferredReturn","pl":"Java","image":{"relativePath":"misconceptions/Java/DeferredReturn/image.jpg"},"correction":{"size":540},"origin":{"size":0},"symptoms":null,"value":{"size":451}},"frontmatter":{"status":"public","concepts":["Return","ControlFlow","Method","Call"],"shortDescription":"A return statement in the middle of a method doesn't return immediately","shortCorrection":"A return statement immediately returns from the method","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"DeferredReturn"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ElsIf/","name":"ElsIf","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":271},"origin":{"size":0},"symptoms":{"size":238},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Conditional","ControlFlow"],"shortDescription":"There is an elsif keyword for multi-way conditional statements","shortCorrection":"There is no special keyword for multi-way conditional statements","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls13"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ElseAlwaysExecutes/","name":"ElseAlwaysExecutes","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":471},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Conditional","ControlFlow"],"shortDescription":"The else branch of an if-else statement always executes","shortCorrection":"The else branch of an if-else statement only executes if the condition evaluates to false","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ElseAlwaysExecutes"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":[{"id":"BothBranchesOfCondExprEvaluated"}]}},{"fields":{"slug":"/misconceptions/Java/EqualityOperatorComparesObjectsValues/","name":"EqualityOperatorComparesObjectsValues","pl":"Java","image":{"relativePath":"misconceptions/Java/EqualityOperatorComparesObjectsValues/image.jpg"},"correction":{"size":659},"origin":{"size":243},"symptoms":{"size":254},"value":{"size":466}},"frontmatter":{"status":"public","concepts":["Equality","Reference","Object","Value","Operator","Expression"],"shortDescription":"o==p compares the objects referred to by variables o and p","shortCorrection":"o==p compares the references stored in the variables o and p","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"EqualsComparesReferences","relation":"Dual"},{"id":"AssignmentCopiesObject","relation":"Parallel (also about reference vs. value)"}],"inOtherPl":[{"id":"EqualityOperatorComparesObjectsValues"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/EqualsComparesReferences/","name":"EqualsComparesReferences","pl":"Java","image":{"relativePath":"misconceptions/Java/EqualsComparesReferences/image.jpg"},"correction":{"size":1531},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":466}},"frontmatter":{"status":"public","concepts":["Equality","Reference","Object","Value","Method","Expression"],"shortDescription":"o.equals(p) compares the references stored in the variables o and p","shortCorrection":"o.equals(p) compares the objects referred to by variables o and p","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"EqualityOperatorComparesObjectsValues","relation":"Dual"}],"inOtherPl":[{"id":"EqualityOperatorComparesListIdentities"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/EvaluationResultsArePrinted/","name":"EvaluationResultsArePrinted","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":246},"origin":{"size":172},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Evaluation","Output"],"shortDescription":"Evaluating an expression means outputting its result","shortCorrection":"Evaluating an expression produces a value, but does not output it","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ToStringPrints","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ExceptionRoot/","name":"ExceptionRoot","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":420},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","Subtyping"],"shortDescription":"Exception is the top-most exception class","shortCorrection":"Throwable is the top-most exception class","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ExpressionAssigns/","name":"ExpressionAssigns","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":782},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Expression","Assignment","Variable"],"shortDescription":"An expression that reads a variable also updates its value after the evaluation","shortCorrection":"A variable is only written using an assignment","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ExpressionAssigns"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ExpressionsDynamicallyTyped/","name":"ExpressionsDynamicallyTyped","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1386},"origin":{"size":95},"symptoms":{"size":0},"value":{"size":113}},"frontmatter":{"status":"draft","concepts":["Evaluation","Expression","Value","Type"],"shortDescription":"One has to evaluate an expression to determine its type","shortCorrection":"The type of expressions is determined, without evaluation, at compile time","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"IntegerDivisionToRational","relation":null},{"id":"UntypedVariables","relation":null},{"id":"PrimitiveVariablesDynamicallyTyped","relation":null},{"id":"TargetTyping","relation":"Another way an expression might get its type"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/FinalReferenceImpliesImmutability/","name":"FinalReferenceImpliesImmutability","pl":"Java","image":{"relativePath":"misconceptions/Java/FinalReferenceImpliesImmutability/image.jpg"},"correction":{"size":562},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Mutability","Reference"],"shortDescription":"An object referred to by a final variable is an immutable object","shortCorrection":"An object referred to by a final variable can be a mutable object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ConstReferenceImpliesImmutability"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ForEachIteratesOverIndices/","name":"ForEachIteratesOverIndices","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Loop","Variable","Array"],"shortDescription":"An enhanced for loop iterates over the indices of an array or a collection","shortCorrection":"An enhanced for loop iterates over the elements of an array or a collection","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ForEachTraversesRecursiveStructure/","name":"ForEachTraversesRecursiveStructure","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":357},"origin":{"size":0},"symptoms":{"size":491},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Loop","Recursion"],"shortDescription":"For-each loops know how to traverse any recursive data structure","shortCorrection":"For-each loops only know how to traverse arrays and Iterables","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ForEachVariableIsElement/","name":"ForEachVariableIsElement","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1537},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Loop","Variable","Array"],"shortDescription":"One can assign to the variable of an enhanced for statement to store a value in the corresponding array or collection element","shortCorrection":"The variable of an enhanced for statement contains a copy of the value of the corresponding array or collection element","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ForIsConditional/","name":"ForIsConditional","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":327},"origin":{"size":0},"symptoms":{"size":421},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Conditional","Loop","ControlFlow"],"shortDescription":"The body of a for statement executes at most once","shortCorrection":"The body of a for statement executes repeatedly, as long as the condition holds","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"IfIsLoop","relation":"Dual"}],"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ForVariableScopeBeyondLoop/","name":"ForVariableScopeBeyondLoop","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":267},"origin":{"size":0},"symptoms":{"size":334},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Loop","Variable","Scope"],"shortDescription":"The scope of variables declared in a for loop header extends beyond the loop","shortCorrection":"The scope of variables declared in a for loop header is limited to the loop","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"LoopBodyScopeImpliesLoopLifetime","relation":"Not about scope, but about lifetime"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/FrameIsClassInstance/","name":"FrameIsClassInstance","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1265},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Stack","Object","Call"],"shortDescription":"A stack frame is the same as an instance of a class","shortCorrection":"Stack frames and class instances both hold variables, but they are different concepts","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/IfIsLoop/","name":"IfIsLoop","pl":"Java","image":{"relativePath":"misconceptions/Java/IfIsLoop/image.jpg"},"correction":{"size":641},"origin":{"size":0},"symptoms":{"size":167},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Conditional","Loop","ControlFlow"],"shortDescription":"The body of an if statement executes repeatedly, as long as the condition holds","shortCorrection":"The body of an if statement executes at most once","observed":null,"pytamaroActivityVersion":null,"videoId":"adZKRGcX1K4","related":[{"id":"ForIsConditional","relation":"Dual"}],"inOtherPl":[{"id":"IfIsLoop"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/IfRequiresElse/","name":"IfRequiresElse","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":859},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Conditional","ControlFlow"],"shortDescription":"Every if statement requires an else","shortCorrection":"If statements do not necessarily require an else","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ImmutableRequiresFinalParameters/","name":"ImmutableRequiresFinalParameters","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":410},"origin":{"size":350},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Mutability","Class","Constructor","Method","Parameter"],"shortDescription":"Immutable classes need final constructor/method parameters","shortCorrection":"Immutable classes can have constructor/method parameters that are not final","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ConstructorParameterIsField","relation":"Possible cause"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ImplicitInterfaceImplementation/","name":"ImplicitInterfaceImplementation","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":502},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Method","Inheritance"],"shortDescription":"Java implicitly produces implementations of any methods a class inherits from the interfaces it implements","shortCorrection":"Java does not implicitly produce implementations of any methods a class inherits from the interfaces it implements","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/IntegerDivisionToRational/","name":"IntegerDivisionToRational","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":194},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Number","Type"],"shortDescription":"Dividing two integers can produce a rational number","shortCorrection":"Dividing two integers always produces an integer","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"RationalLiterals","relation":null},{"id":"ExpressionsDynamicallyTyped","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/InterfaceExtendClass/","name":"InterfaceExtendClass","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":685},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Subtyping","Inheritance"],"shortDescription":"An interface can extend a class","shortCorrection":"An interface cannot extend a class","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/LargeIntegerLong/","name":"LargeIntegerLong","pl":"Java","image":{"relativePath":"misconceptions/Java/LargeIntegerLong/image.jpg"},"correction":{"size":1518},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Literal","Number","Type","Expression"],"shortDescription":"Large integer numbers have type long","shortCorrection":"Integer numbers without L or l suffix that are too large for an int are illegal","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoLongLiterals","relation":"Students may be unaware of the L or l suffix"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/LiteralNoExpression/","name":"LiteralNoExpression","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":496},"origin":{"size":669},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Literal","Expression"],"shortDescription":"A literal is not an expression","shortCorrection":"Even an individual literal is an expression","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoAtomicExpression","relation":"General case"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/LiteralString/","name":"LiteralString","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":82},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Literal","String","Argument"],"shortDescription":"When passing a literal string as argument to a method, no quotes are needed","shortCorrection":"String literals always must be surrounded by quotes","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/LocalVariablesAutoInitialized/","name":"LocalVariablesAutoInitialized","pl":"Java","image":{"relativePath":"misconceptions/Java/LocalVariablesAutoInitialized/image.jpg"},"correction":{"size":432},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":1138}},"frontmatter":{"status":"public","concepts":["Variable","Value","Assignment"],"shortDescription":"Local variables are automatically initialized","shortCorrection":"Local variables must be initialized explicitly","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MustInitializeFieldInConstructor","relation":"Almost the opposite"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/LoopBodyScopeImpliesLoopLifetime/","name":"LoopBodyScopeImpliesLoopLifetime","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":382},"origin":{"size":0},"symptoms":{"size":379},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Loop","Variable","Lifetime","Scope"],"shortDescription":"Lifetime of variables declared in a loop body extends across all loop iterations","shortCorrection":"Lifetime of variables declared in a loop body is limited to one loop iteration","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ForVariableScopeBeyondLoop","relation":"Not about lifetime, but about scope"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/LoopTerminatingCondition/","name":"LoopTerminatingCondition","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Loop","Conditional","ControlFlow"],"shortDescription":"For and while loops end when the condition becomes true","shortCorrection":"For and while loops end when the condition becomes false","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MapToBooleanWithConditionalOperator/","name":"MapToBooleanWithConditionalOperator","pl":"Java","image":{"relativePath":"misconceptions/Java/MapToBooleanWithConditionalOperator/image.jpg"},"correction":{"size":407},"origin":{"size":492},"symptoms":{"size":343},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Conditional","Expression","Operator","Boolean"],"shortDescription":"To map a boolean expression to a boolean, a conditional operator is necessary","shortCorrection":"To map a boolean expression to a boolean, one can just use it","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MapToBooleanWithIf","relation":"Same, but using if statement"},{"id":"ComparisonWithBooleanLiteral","relation":"Similar detour (via comparison)"},{"id":"NoAtomicExpression","relation":"Is a variable name alone an expression"},{"id":"ReturnCall","relation":"When used in return statement"}],"inOtherPl":[{"id":"MapToBooleanWithTernaryOperator"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MapToBooleanWithIf/","name":"MapToBooleanWithIf","pl":"Java","image":{"relativePath":"misconceptions/Java/MapToBooleanWithIf/image.jpg"},"correction":{"size":664},"origin":{"size":483},"symptoms":{"size":905},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Conditional","Statement","Boolean"],"shortDescription":"To map a boolean expression to a boolean, an if statement is necessary","shortCorrection":"To map a boolean expression to a boolean, one can just use it","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MapToBooleanWithConditionalOperator","relation":"Same, but using conditional operator"},{"id":"ComparisonWithBooleanLiteral","relation":"Similar detour (via comparison)"}],"inOtherPl":[{"id":"MapToBooleanWithIf"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/MethodAsField/","name":"MethodAsField","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":346},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Field","Object","Class"],"shortDescription":"Each object contains its own special fields for all of its methods","shortCorrection":"Each object contains a special field referring to its class, and the class knows about its methods","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ThisAsField","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MethodWithoutReturnType/","name":"MethodWithoutReturnType","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1248},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Type"],"shortDescription":"A method declaration does not need to include a return type","shortCorrection":"A method declaration must include a return type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MethodsWithoutClass/","name":"MethodsWithoutClass","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":92},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Class"],"shortDescription":"Methods can be defined outside a class","shortCorrection":"Methods must be defined inside a class","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MultiReferenceVariable/","name":"MultiReferenceVariable","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":111},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Reference","Variable","Object"],"shortDescription":"A reference variable can point to multiple objects","shortCorrection":"A reference variable can point to only one object at a time","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MultiValueVariable","relation":"General case"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MultiValueVariable/","name":"MultiValueVariable","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":120},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Variable","Value"],"shortDescription":"A variable can contain more than one value","shortCorrection":"A variable can contain only one value at a time","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MultiReferenceVariable","relation":"Special case"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MultidimensionalArray/","name":"MultidimensionalArray","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":606},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array"],"shortDescription":"A multi-dimensional array is one single array object","shortCorrection":"A multi-dimensional is a structure of nested arrays","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MultipleSuperclasses/","name":"MultipleSuperclasses","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":162},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Subtyping"],"shortDescription":"A class can have multiple superclasses","shortCorrection":"A class can have only one direct superclass","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/MustInitializeFieldInConstructor/","name":"MustInitializeFieldInConstructor","pl":"Java","image":{"relativePath":"misconceptions/Java/MustInitializeFieldInConstructor/image.jpg"},"correction":{"size":584},"origin":{"size":105},"symptoms":{"size":0},"value":{"size":605}},"frontmatter":{"status":"public","concepts":["Assignment","Constructor","Field","Value","Variable"],"shortDescription":"Constructors must assign values to all fields","shortCorrection":"Constructors do not need to assign values to all fields","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoEmptyConstructor","relation":"More general"},{"id":"LocalVariablesAutoInitialized","relation":"Almost the inverse"},{"id":"ConstructorParameterIsField","relation":"May co-occur"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/NamedTypeParameter/","name":"NamedTypeParameter","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1125},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Type","Parameter","Name"],"shortDescription":"To instantiate a generic type, for each type parameter one has to specify both the name and the type","shortCorrection":"To instantiate a generic type, for each type parameter one only needs to specify the type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NestedObjectsImplyNestedClasses/","name":"NestedObjectsImplyNestedClasses","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1042},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Object"],"shortDescription":"If objects are part of a containment hierarchy, their classes are nested, too","shortCorrection":"Classes are independent of object containment","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NestedPackages/","name":"NestedPackages","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":816},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Member"],"shortDescription":"Packages can contain other packages which have access to members of the containing package","shortCorrection":"Sub-packages are independent of their parent packages and do not have special access rights","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoAtomicExpression/","name":"NoAtomicExpression","pl":"Java","image":{"relativePath":"misconceptions/Java/NoAtomicExpression/image.jpg"},"correction":{"size":1489},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Expression","Operator","Literal","Variable"],"shortDescription":"Expressions must consist of more than one piece","shortCorrection":"A single piece, like a literal or name, also is an expression","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ObjectsMustBeNamed","relation":"Maybe"},{"id":"LiteralNoExpression","relation":"Special case"}],"inOtherPl":[{"id":"NoAtomicExpression"},{"id":"NoAtomicExpression"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/NoCallOnStringLiteral/","name":"NoCallOnStringLiteral","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":267},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call","String","Literal"],"shortDescription":"One cannot invoke methods on String literals","shortCorrection":"One can invoke methods on String literals","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"StringLiteralNoObject","relation":"Possible cause"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoCastIfSameSize/","name":"NoCastIfSameSize","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":491},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Variable","Value","Number","Type"],"shortDescription":"If a variable is at least as big (bit-width) as a value, then no cast is needed to a assign the value to the variable","shortCorrection":"A variable being at least as big (bit-width) as a value may not be sufficient to avoid a cast when assigning the value to the variable","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoCharEscape/","name":"NoCharEscape","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":186},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Literal"],"shortDescription":"\\ is a normal character in char and String literals","shortCorrection":"\\ is an escape character in char and String literals","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoEmptyConstructor/","name":"NoEmptyConstructor","pl":"Java","image":{"relativePath":"misconceptions/Java/NoEmptyConstructor/image.jpg"},"correction":{"size":833},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Constructor"],"shortDescription":"A constructor must do something","shortCorrection":"A constructor's body can be empty","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MustInitializeFieldInConstructor","relation":"Special case"},{"id":"ConstructorAllocates","relation":"Special case"},{"id":"ConstructorReturnsObject","relation":"Special case"}],"inOtherPl":[{"id":"NoEmptyInit"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/NoFieldInheritance/","name":"NoFieldInheritance","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":204},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Object","Class","Field"],"shortDescription":"An object contains only the fields declared in its class","shortCorrection":"An object contains the fields declared in its class and all its superclasses","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoFieldlessObjects/","name":"NoFieldlessObjects","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":372},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Object","Field"],"shortDescription":"Objects without instance variables can't exist","shortCorrection":"Objects can have any number of instance variables, including zero","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoFloatLiterals/","name":"NoFloatLiterals","pl":"Java","image":{"relativePath":"misconceptions/Java/NoFloatLiterals/image.jpg"},"correction":{"size":152},"origin":{"size":0},"symptoms":{"size":112},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Literal","Number","Type"],"shortDescription":"There are no float literals","shortCorrection":"An F or f suffix can turn a number into a float literal","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoLongLiterals","relation":"Analogous misconception for type long"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoImplicitWidening/","name":"NoImplicitWidening","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Type"],"shortDescription":"Smaller types are never automatically converted into bigger ones without an explicit cast","shortCorrection":"Smaller types can be automatically converted into bigger ones even without an explicit cast","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoInsideMethodCallInConstructor/","name":"NoInsideMethodCallInConstructor","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call","Constructor","Object"],"shortDescription":"It is foirbidden to call other methods on the same object while inside its constructor","shortCorrection":"It is allow to call other methods on the same object while inside its constructor","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoJaggedArrays/","name":"NoJaggedArrays","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":909},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array"],"shortDescription":"Multi-dimensional arrays have a rectangular shape","shortCorrection":"Multi-dimensional arrays can have a jagged shape","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoLocalVariables/","name":"NoLocalVariables","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":992},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Variable","Stack"],"shortDescription":"There are no local variables","shortCorrection":"Methods can have local variables","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoLongLiterals/","name":"NoLongLiterals","pl":"Java","image":{"relativePath":"misconceptions/Java/NoLongLiterals/image.jpg"},"correction":{"size":154},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Literal","Number","Type"],"shortDescription":"There are no long literals","shortCorrection":"An L or l suffix can turn a number into a long literal","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoFloatLiterals","relation":"Analogous misconception for type float"},{"id":"LargeIntegerLong","relation":"Maybe"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoMethodInheritance/","name":"NoMethodInheritance","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Inheritance","Field","Method","Class"],"shortDescription":"Subclasses inherit fields but not methods","shortCorrection":"Subclasses inherit both fields and methods","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NoReservedWords/","name":"NoReservedWords","pl":"Java","image":{"relativePath":"misconceptions/Java/NoReservedWords/image.jpg"},"correction":{"size":266},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Name"],"shortDescription":"Every sequence of letters and digits starting with a letter can be used as an identifier","shortCorrection":"Some character sequences are reserved for use as keywords and cannot be used as identifiers","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"NoReservedWords"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/NoShortCircuit/","name":"NoShortCircuit","pl":"Java","image":{"relativePath":"misconceptions/Java/NoShortCircuit/image.jpg"},"correction":{"size":167},"origin":{"size":0},"symptoms":{"size":333},"value":{"size":1133}},"frontmatter":{"status":"public","concepts":["Expression","Evaluation","Operator","Boolean","ControlFlow"],"shortDescription":"&& and || always evaluate both operands","shortCorrection":"&& and || evaluate their right operand only if absolutely necessary","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoSingleLogicAnd","relation":"& seen as only a bitwise AND"}],"inOtherPl":[{"id":"NoShortCircuit"}],"expressibleInNms":[{"id":"ExpressionAsTree"},{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/NoSingleLogicAnd/","name":"NoSingleLogicAnd","pl":"Java","image":{"relativePath":"misconceptions/Java/NoSingleLogicAnd/image.jpg"},"correction":{"size":1057},"origin":{"size":0},"symptoms":{"size":177},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Operator","Boolean"],"shortDescription":"& is only a bitwise AND","shortCorrection":"& for boolean operands is a logical AND","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoShortCircuit","relation":"&& seen as the one normal logic AND"}],"inOtherPl":[{"id":"NoSingleLogicAnd"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/NoStringToString/","name":"NoStringToString","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":351},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Method","Call"],"shortDescription":"One cannot invoke toString() on a String","shortCorrection":"One can invoke toString() on a String","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NullIsObject/","name":"NullIsObject","pl":"Java","image":{"relativePath":"misconceptions/Java/NullIsObject/image.jpg"},"correction":{"size":155},"origin":{"size":207},"symptoms":{"size":0},"value":{"size":779}},"frontmatter":{"status":"public","concepts":["Reference","Object","Null","Literal","Value"],"shortDescription":"null is an object","shortCorrection":"null is a reference pointing to no object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ThisCanBeNull","relation":"If NullIsObject, then ThisCanBeNull"}],"inOtherPl":[{"id":"NullIsObject"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/NullPointerExceptionCompileTime/","name":"NullPointerExceptionCompileTime","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception"],"shortDescription":"NullPointerExceptions are detected at compile time","shortCorrection":"NullPointerExceptions are detected at runtime","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"},{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/NumericToBooleanCoercion/","name":"NumericToBooleanCoercion","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":415},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Number","Type","Boolean"],"shortDescription":"Numeric types can be coerced to boolean","shortCorrection":"Numeric types cannot be coerced to boolean","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ReferenceToBooleanCoercion","relation":"Same, for reference types"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ObjectsMustBeNamed/","name":"ObjectsMustBeNamed","pl":"Java","image":{"relativePath":"misconceptions/Java/ObjectsMustBeNamed/image.jpg"},"correction":{"size":1363},"origin":{"size":1996},"symptoms":{"size":775},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Allocation","Constructor","Call","Expression","Name"],"shortDescription":"A variable is needed to instantiate an object","shortCorrection":"Objects have no name and can exist without a variable referring to them","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"CannotChainMemberToConstructor","relation":"Possible consequence"},{"id":"NoAtomicExpression","relation":"Object instantiation not seen as expression"},{"id":"VariablesHoldObjects","relation":"Implied by"},{"id":"VariablesHoldExpressions","relation":"Maybe"}],"inOtherPl":[{"id":"ObjectsMustBeNamed"}],"expressibleInNms":[{"id":"ExpressionAsTree"},{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/OnlyInnermostArrayElements/","name":"OnlyInnermostArrayElements","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":519},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array"],"shortDescription":"Only the elements of the innermost array of a multi-dimensional array are accessible","shortCorrection":"Also the elements of outer arrays of a multi-dimensional array are accessible","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/OutOfBoundsElementsAreNull/","name":"OutOfBoundsElementsAreNull","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":463},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Null"],"shortDescription":"Out-of-bounds array elements are null","shortCorrection":"Out-of-bounds array elements cannot be accessed","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/OutsideInMethodNesting/","name":"OutsideInMethodNesting","pl":"Java","image":{"relativePath":"misconceptions/Java/OutsideInMethodNesting/image.jpg"},"correction":{"size":1087},"origin":{"size":0},"symptoms":{"size":1011},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Method","Call","Expression","Function","Composition"],"shortDescription":"Nested method calls are invoked outside in","shortCorrection":"Nested method calls are invoked inside out","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"RightToLeftChaining","relation":"Evaluation order"}],"inOtherPl":[{"id":"OutsideInFunctionNesting"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ParenthesesOnlyIfArgument/","name":"ParenthesesOnlyIfArgument","pl":"Java","image":{"relativePath":"misconceptions/Java/ParenthesesOnlyIfArgument/image.jpg"},"correction":{"size":185},"origin":{"size":117},"symptoms":{"size":115},"value":{"size":1128}},"frontmatter":{"status":"public","concepts":["Method","Call","Expression"],"shortDescription":"() are optional for method calls without arguments","shortCorrection":"() are mandatory even for method calls without arguments","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ReturnCall","relation":"Also about need for parentheses"}],"inOtherPl":[{"id":"ParenthesesOnlyIfArgument"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null},{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/PreIncrementBeforeLoop/","name":"PreIncrementBeforeLoop","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":845},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Operator","Loop","ControlFlow"],"shortDescription":"Pre-increment in update part of for loop means increment before loop body","shortCorrection":"Pre-increment in update part of for loop means same as pre-increment anywhere else","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrimitiveIsObject/","name":"PrimitiveIsObject","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":134},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Primitive","Value","Object"],"shortDescription":"Primitive values are heap objects","shortCorrection":"Primitive values are not objects","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrimitiveTypeParameter/","name":"PrimitiveTypeParameter","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":147},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Type","Parameter","Primitive"],"shortDescription":"Type parameters of generic types can be instantiated with primitive types","shortCorrection":"Type parameters of generic types need to be instantiated with reference types","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrimitiveVariablesDynamicallyTyped/","name":"PrimitiveVariablesDynamicallyTyped","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":3192},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Type","Value"],"shortDescription":"The type of a primitive variable depends on its value","shortCorrection":"The type of a primitive variable is fixed and does not depend on its value","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ExpressionsDynamicallyTyped","relation":"General case"},{"id":"UntypedVariables","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrivateAccessibleInSubclass/","name":"PrivateAccessibleInSubclass","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Member","Field","Method","Inheritance"],"shortDescription":"Private members of a superclass are accessible from a subclass","shortCorrection":"Private members of a superclass are not accessible from a subclass","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrivateFieldsImplyImmutability/","name":"PrivateFieldsImplyImmutability","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":292},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Mutability","Class","Field","AccessModifier"],"shortDescription":"A class where all fields are private is immutable","shortCorrection":"A class where all fields are private can still be mutable","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"PrivateMeansFinal","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrivateFromOtherInstance/","name":"PrivateFromOtherInstance","pl":"Java","image":{"relativePath":"misconceptions/Java/PrivateFromOtherInstance/image.jpg"},"correction":{"size":869},"origin":{"size":0},"symptoms":{"size":68},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["AccessModifier","Member"],"shortDescription":"An object cannot access private members of other objects of the same class","shortCorrection":"An object can access private members of all other objects of the same class","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"PrivateFromStatic","relation":"Maybe"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrivateFromStatic/","name":"PrivateFromStatic","pl":"Java","image":{"relativePath":"misconceptions/Java/PrivateFromStatic/image.jpg"},"correction":{"size":403},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["AccessModifier","Member","Static"],"shortDescription":"Static methods cannot access private members of instances of same class","shortCorrection":"Static methods can access private members of instances of same class","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"PrivateFromOtherInstance","relation":"Maybe"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/PrivateMeansFinal/","name":"PrivateMeansFinal","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":625},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Mutability","Field","AccessModifier"],"shortDescription":"A private field cannot be changed","shortCorrection":"Even a private field can be mutable","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"PrivateFieldsImplyImmutability","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/RationalLiterals/","name":"RationalLiterals","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":625},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Number","Literal"],"shortDescription":"Rational fractions are literals","shortCorrection":"Rational fractions are divisions of two integer literals","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"IntegerDivisionToRational","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/RecursiveActivationsShareFrame/","name":"RecursiveActivationsShareFrame","pl":"Java","image":{"relativePath":"misconceptions/Java/RecursiveActivationsShareFrame/image.jpg"},"correction":{"size":296},"origin":{"size":0},"symptoms":{"size":1107},"value":{"size":1992}},"frontmatter":{"status":"public","concepts":["Recursion","Stack"],"shortDescription":"Recursive calls of a method share a stack frame","shortCorrection":"Each recursive call of a method gets its own stack frame","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/RecursiveCallSiteNoReturn/","name":"RecursiveCallSiteNoReturn","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":2710},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Recursion","Call"],"shortDescription":"Tail-recursive call sites of non-void methods need no return statement","shortCorrection":"In non-void methods, even tail-recursive call sites need a return statement","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/RecursiveMethodImpliesRecursiveType/","name":"RecursiveMethodImpliesRecursiveType","pl":"Java","image":{"relativePath":"misconceptions/Java/RecursiveMethodImpliesRecursiveType/image.jpg"},"correction":{"size":559},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":775}},"frontmatter":{"status":"public","concepts":["Recursion","Method","Type"],"shortDescription":"A class with a recursive method represents part of a recursive data structure","shortCorrection":"A class having a recursive method does not imply that it is part of a recursive data structure","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/RecursiveMethodNeedsIfElse/","name":"RecursiveMethodNeedsIfElse","pl":"Java","image":{"relativePath":"misconceptions/Java/RecursiveMethodNeedsIfElse/image.jpg"},"correction":{"size":1308},"origin":{"size":578},"symptoms":{"size":0},"value":{"size":189}},"frontmatter":{"status":"public","concepts":["Recursion","Method","Conditional","ControlFlow"],"shortDescription":"A recursive method needs to contain an if-else statement","shortCorrection":"A recursive method does not necessarily need to contain an if-else statement","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"RecursiveFunctionNeedsIfElse"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ReferenceIntoStack/","name":"ReferenceIntoStack","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":102},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Reference","Stack"],"shortDescription":"References can point into the stack","shortCorrection":"References can only point into the heap","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ReferenceToBooleanCoercion/","name":"ReferenceToBooleanCoercion","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1162},"origin":{"size":215},"symptoms":{"size":288},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Reference","Type","Boolean"],"shortDescription":"Every reference type can be coerced to boolean","shortCorrection":"Not every reference type can be coerced to boolean","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NumericToBooleanCoercion","relation":"Same, for numeric types"},{"id":"ReferenceToIntegerConversion","relation":"To number"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ReferenceToIntegerConversion/","name":"ReferenceToIntegerConversion","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":798},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Reference","Type","Number"],"shortDescription":"One can cast between references and ints","shortCorrection":"One cannot cast between references and ints","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ReferenceToBooleanCoercion","relation":"To boolean instead of integer"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ReferenceToVariable/","name":"ReferenceToVariable","pl":"Java","image":{"relativePath":"misconceptions/Java/ReferenceToVariable/image.jpg"},"correction":{"size":684},"origin":{"size":142},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Reference","Variable"],"shortDescription":"References can point to variables","shortCorrection":"References can only point to heap objects","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ReferringToRecursiveStructureMakesRecursive/","name":"ReferringToRecursiveStructureMakesRecursive","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":477},"origin":{"size":199},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Recursion"],"shortDescription":"A class referring to a recursive data structure is (indirectly) part of that recursion as well","shortCorrection":"If a class refers to a recursive data structure, it is not necessarily part of that recursion","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ReturnCall/","name":"ReturnCall","pl":"Java","image":{"relativePath":"misconceptions/Java/ReturnCall/image.jpg"},"correction":{"size":451},"origin":{"size":0},"symptoms":{"size":916},"value":{"size":227}},"frontmatter":{"status":"public","concepts":["Return","Method","Call"],"shortDescription":"Return statements need () around the return value","shortCorrection":"Return statements do not need () around the return value","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoAtomicExpression","relation":"When parentheses only around non-atomic expressions"},{"id":"ParenthesesOnlyIfArgument","relation":"Also about need for parentheses"}],"inOtherPl":[{"id":"ReturnCall"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Java","image":{"relativePath":"misconceptions/Java/ReturnUnwindsMultipleFrames/image.jpg"},"correction":{"size":893},"origin":{"size":0},"symptoms":{"size":969},"value":{"size":1724}},"frontmatter":{"status":"public","concepts":["Call","Return","Stack","Recursion"],"shortDescription":"A return statement can unwind multiple call stack frames","shortCorrection":"A return statement pops exactly one call stack frame","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ReturnUnwindsMultipleFrames"}],"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/RightToLeftChaining/","name":"RightToLeftChaining","pl":"Java","image":{"relativePath":"misconceptions/Java/RightToLeftChaining/image.jpg"},"correction":{"size":1283},"origin":{"size":0},"symptoms":{"size":198},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Method","Call","Field","Member","Expression","Operator","Associativity"],"shortDescription":"Chained accesses are invoked from right to left","shortCorrection":"Chained accesses are invoked from left to right","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"OutsideInMethodNesting","relation":"Evaluation order"},{"id":"CannotChainMemberAccesses","relation":"Also about member accesses"},{"id":"CannotChainMemberToConstructor","relation":"Also about member accesses"}],"inOtherPl":[{"id":"RightToLeftChaining"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/RuntimeExceptionChecked/","name":"RuntimeExceptionChecked","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":143},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","Subtyping"],"shortDescription":"RuntimeExceptions are checked exceptions","shortCorrection":"RuntimeExceptions are unchecked exceptions","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/SingleQuoteString/","name":"SingleQuoteString","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":53},"origin":{"size":129},"symptoms":{"size":117},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Literal"],"shortDescription":"String literals can be in single quotes","shortCorrection":"String literals must be in double quotes","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"LiteralString","relation":"Related"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/StackTraceIsCallHistory/","name":"StackTraceIsCallHistory","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":412},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Stack","Method","Call"],"shortDescription":"A stack trace is the sequence of previously called methods","shortCorrection":"A stack trace only includes the currently active methods","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/StaticCallPolymorphic/","name":"StaticCallPolymorphic","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":793},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Call","Polymorphism","Parameter","Type"],"shortDescription":"A static method call is dispatched polymorphically at runtime based on the argument types","shortCorrection":"A static method call is dispatched based on the declared types of the arguments","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/StaticDispatch/","name":"StaticDispatch","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Inheritance","Method","Call","Subtyping"],"shortDescription":"The method to be called is determined by the static type","shortCorrection":"The method to be called is determined by the dynamic type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/StringLengthField/","name":"StringLengthField","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":217},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Field","Method"],"shortDescription":"One can know the length of a String object by accessing its length field","shortCorrection":"One can know the length of a String object by calling its length method","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/StringLiteralNoObject/","name":"StringLiteralNoObject","pl":"Java","image":{"relativePath":"misconceptions/Java/StringLiteralNoObject/image.jpg"},"correction":{"size":572},"origin":{"size":0},"symptoms":{"size":211},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Literal","String"],"shortDescription":"One needs to call the String constructor to get a String object from a literal","shortCorrection":"A String literal represents a String object and can be treated as such","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoCallOnStringLiteral","relation":"Maybe"}],"inOtherPl":[{"id":"StringLiteralNoObject"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/StringPlusStringifiesExpression/","name":"StringPlusStringifiesExpression","pl":"Java","image":{"relativePath":"misconceptions/Java/StringPlusStringifiesExpression/image.jpg"},"correction":{"size":221},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":2672}},"frontmatter":{"status":"public","concepts":["String","Expression","Operator"],"shortDescription":"String concatenation stringifies non-String operand expressions","shortCorrection":"String concatenation evaluates non-String operand expressions and casts value to String","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"VariablesHoldExpressions","relation":"Expressions seen as a first-order construct"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/StringRepetitionOperator/","name":"StringRepetitionOperator","pl":"Java","image":{"relativePath":"misconceptions/Java/StringRepetitionOperator/image.jpg"},"correction":{"size":166},"origin":{"size":136},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Number","Repetition"],"shortDescription":"The multiplication operator can repeat a String a number of times","shortCorrection":"The multiplication operator does not accept a String and a number","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"StringRepetitionOperator"},{"id":"NoSequenceRepetition"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/SubtypeCompatibleWithSupertype/","name":"SubtypeCompatibleWithSupertype","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Subtyping","Type","Inheritance","Reference"],"shortDescription":"A variable of a subtype can reference an object of a supertype","shortCorrection":"A variable of a subtype cannot reference an object of a supertype","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"SupertypeIncompatibleWithSubtype","relation":"Inverse"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/SuperAlwaysHasParentheses/","name":"SuperAlwaysHasParentheses","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Call","Inheritance"],"shortDescription":"To call a method on a superclass, parentheses are needed after the keyword super","shortCorrection":"To call a method on a superclass, it is wrong to write parentheses after the keyword super","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/SuperNotFirstStatement/","name":"SuperNotFirstStatement","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Inheritance","Call"],"shortDescription":"super() can be called anywhere in the constructor of a subclass","shortCorrection":"super() must be called in the first statement in the constructor of a subclass","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/SuperclassObjectAllocated/","name":"SuperclassObjectAllocated","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Allocation","Class","Object","Inheritance"],"shortDescription":"When instantiating an object of a subclass, an object of a superclass is also allocated","shortCorrection":"When instantiating an object of a subclass, just that object is allocated","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/SupertypeIncompatibleWithSubtype/","name":"SupertypeIncompatibleWithSubtype","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Inheritance","Subtyping","Type","Reference"],"shortDescription":"A variable of a supertype cannot reference an object of a subtype","shortCorrection":"A variable of a supertype can reference an object of a subtype","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"SubtypeCompatibleWithSupertype","relation":"Inverse"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/TargetTyping/","name":"TargetTyping","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":2540},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Type","Number","Expression"],"shortDescription":"The type of a numerical expression depends on the type expected by the surrounding context","shortCorrection":"The type of a numerical expression is determined by the expression","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ExpressionsDynamicallyTyped","relation":"Another way an expression might get its type"}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ThisAsField/","name":"ThisAsField","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":197},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Field","Variable","Reference","Object","Self"],"shortDescription":"this is a special field in the object","shortCorrection":"this is a special local variable in the stack frame","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"MethodAsField","relation":"Special case"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ThisAssignable/","name":"ThisAssignable","pl":"Java","image":{"relativePath":"misconceptions/Java/ThisAssignable/image.jpg"},"correction":{"size":278},"origin":{"size":0},"symptoms":{"size":603},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Variable","Reference","Assignment","Object","Mutability","Self"],"shortDescription":"One can assign to this","shortCorrection":"One cannot assign to this","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ConstructorAllocates","relation":"When assigning to this in constructor"},{"id":"ConstructorReturnsObject","relation":"Maybe"},{"id":"ThisCanBeNull","relation":"Maybe"},{"id":"ThisInConstructorIsNull","relation":"Maybe"}],"inOtherPl":[{"id":"SelfAssignable"},{"id":"ThisAssignable"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ThisCanBeNull/","name":"ThisCanBeNull","pl":"Java","image":{"relativePath":"misconceptions/Java/ThisCanBeNull/image.jpg"},"correction":{"size":447},"origin":{"size":303},"symptoms":{"size":1250},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Null","Reference","Self"],"shortDescription":"this can be null","shortCorrection":"this is never null","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ThisInConstructorIsNull","relation":"Specific case"},{"id":"NullIsObject","relation":"If NullIsObject, then ThisCanBeNull"},{"id":"ThisAssignable","relation":"One could assign null to this"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ThisExistsInStaticMethod/","name":"ThisExistsInStaticMethod","pl":"Java","image":{"relativePath":"misconceptions/Java/ThisExistsInStaticMethod/image.jpg"},"correction":{"size":245},"origin":{"size":0},"symptoms":{"size":71},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Variable","Reference","Object","Static","Method","Self"],"shortDescription":"this is a local variable, also in static methods","shortCorrection":"this does not exist in static methods","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ThisAsField","relation":"About where this is stored"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ThisInConstructorIsNull/","name":"ThisInConstructorIsNull","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":233},"origin":{"size":0},"symptoms":{"size":379},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Constructor","Null","Reference","Self"],"shortDescription":"In a constructor, this is null","shortCorrection":"In a constructor, this is never null","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ThisCanBeNull","relation":"General case"}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ThisNoExpression/","name":"ThisNoExpression","pl":"Java","image":{"relativePath":"misconceptions/Java/ThisNoExpression/image.jpg"},"correction":{"size":395},"origin":{"size":222},"symptoms":{"size":322},"value":{"size":182}},"frontmatter":{"status":"public","concepts":["Expression","Self"],"shortDescription":"The name this is not an expression","shortCorrection":"Even the name this on its own is an expression","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoAtomicExpression","relation":"General case"}],"inOtherPl":[{"id":"SelfNoExpression"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/ToStringPrints/","name":"ToStringPrints","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":173},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","String","Output","Evaluation"],"shortDescription":"Invoking toString() prints something","shortCorrection":"Invoking toString() does not produce any output","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"EvaluationResultsArePrinted","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/TryCatchMandatory/","name":"TryCatchMandatory","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":857},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","ControlFlow"],"shortDescription":"When a piece of code can throw an exception, it must be surrounded with a try/catch block","shortCorrection":"When a piece of code can throw an exception, it is optional to surround it with a try/catch block","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/TryFinishes/","name":"TryFinishes","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":746},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","ControlFlow"],"shortDescription":"Exceptions get thrown at the end of the try block","shortCorrection":"Exceptions get thrown immediately when they occur","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/UndeclaredVariables/","name":"UndeclaredVariables","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":252},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Variable"],"shortDescription":"Variables can be used even without being declared beforehand","shortCorrection":"Variables must be declared before they are used","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/UnqualifiedNamesMustDiffer/","name":"UnqualifiedNamesMustDiffer","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":90},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Name","Class","Scope"],"shortDescription":"The unqualified names of different classes must be different","shortCorrection":"Classes in different packages can have the same unqualified name","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/UntypedVariables/","name":"UntypedVariables","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":691},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Variable","Type"],"shortDescription":"Variable declarations don't need a type","shortCorrection":"Variable declarations need a type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"PrimitiveVariablesDynamicallyTyped","relation":null},{"id":"ExpressionsDynamicallyTyped","relation":null}],"inOtherPl":null,"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"},{"id":"jls9"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/UseOfSelfTypeImpliesRecursiveType/","name":"UseOfSelfTypeImpliesRecursiveType","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":657},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Class","Method","Variable","Parameter","Return","Value","Type","Recursion"],"shortDescription":"If a class has a method that has a local variable, parameter, or return value with the class as its type, the class is a recursive type","shortCorrection":"A class can have methods with a local variable, parameter, or return value with the class as its type without being a recursive type","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/VariablesHoldExpressions/","name":"VariablesHoldExpressions","pl":"Java","image":{"relativePath":"misconceptions/Java/VariablesHoldExpressions/image.jpg"},"correction":{"size":448},"origin":{"size":281},"symptoms":{"size":219},"value":{"size":444}},"frontmatter":{"status":"public","concepts":["Variable","Expression","Assignment"],"shortDescription":"= stores an expression in a variable","shortCorrection":"= evaluates an expression and stores its value in a variable","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"StringPlusStringifiesExpression","relation":"Expressions seen as a first-order construct"},{"id":"ObjectsMustBeNamed","relation":"May sound unrelated, but it is similar"}],"inOtherPl":[{"id":"VariablesHoldExpressions"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"jls21"}],"references":[{"id":null},{"id":null},{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/VariablesHoldObjects/","name":"VariablesHoldObjects","pl":"Java","image":{"relativePath":"misconceptions/Java/VariablesHoldObjects/image.jpg"},"correction":{"size":449},"origin":{"size":0},"symptoms":{"size":147},"value":{"size":189}},"frontmatter":{"status":"public","concepts":["Variable","Object","Reference"],"shortDescription":"A variable of a reference type contains a whole object","shortCorrection":"A variable of a reference type contains a reference to an object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"AssignmentCopiesObject","relation":"Operational consequence"},{"id":"EqualityOperatorComparesObjectsValues","relation":"Operational consequence"},{"id":"ObjectsMustBeNamed","relation":"Consequence, if variables are named"}],"inOtherPl":[{"id":"VariablesHoldObjects"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/VoidMethodNotRecursive/","name":"VoidMethodNotRecursive","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":154},"origin":{"size":474},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Type","Recursion"],"shortDescription":"A method with void return type can't be recursive","shortCorrection":"A method with void return type can be recursive","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":null}},{"fields":{"slug":"/misconceptions/Java/VoidMethodReturnsValue/","name":"VoidMethodReturnsValue","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":445},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Method","Type","Return","Value"],"shortDescription":"A method with void return type can return a value","shortCorrection":"A method with void return type cannot return a value","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls21"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Java/ZeroDigitsCompress/","name":"ZeroDigitsCompress","pl":"Java","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":520},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Number"],"shortDescription":"In integer numbers, decimal digits with value `0` take less storage than decimal digits with other values","shortCorrection":"In integer numbers, all decimal digits take the same amount of storage","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"jls13"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/AccessingInexistentPropertyError/","name":"AccessingInexistentPropertyError","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":317},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Exception","Field","Member","Object","Undefined"],"shortDescription":"Accessing a non existent property on an object produces an error","shortCorrection":"Accessing a non existent property on an object evaluates to undefined","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ArrowFunctionNoImpliedReturn/","name":"ArrowFunctionNoImpliedReturn","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Return","Expression","Function"],"shortDescription":"Even when an arrow function consists just of an expression, the return keyword must be explicitly written","shortCorrection":"When an arrow function consists just of an expression, the return keyword is implied","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ArrowFunctionRequiresFunctionKeyword/","name":"ArrowFunctionRequiresFunctionKeyword","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":364},"origin":{"size":280},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Function","Expression"],"shortDescription":"Arrow functions also require the keyword 'function'","shortCorrection":"Arrow functions do not require the keyword 'function'","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/AssignmentCopiesObject/image.jpg"},"correction":{"size":679},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Assignment","Variable","Object","Reference"],"shortDescription":"Assignment copies the object","shortCorrection":"Assignment copies the reference pointing to the object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"EqualityOperatorComparesObjectsValues","relation":"Parallel (also about reference vs. value)"},{"id":"ObjectAsParameterIsCopied","relation":"Parallel (also about reference vs. value)"}],"inOtherPl":[{"id":"AssignmentCopiesObject"},{"id":"AssignmentCopiesObject"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/JavaScript/CallbackParametersInCaller/","name":"CallbackParametersInCaller","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":353},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Argument","Parameter","Function","Value","Call"],"shortDescription":"Parameters of a callback function may be written as parameters of the caller function","shortCorrection":"A function that expects a callback has that callback function as a parameter","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/CharType/","name":"CharType","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":204},"origin":{"size":101},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Type"],"shortDescription":"A single character is of type char","shortCorrection":"A single character is of type string","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ClassDefinesType/","name":"ClassDefinesType","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/ClassDefinesType/image.jpg"},"correction":{"size":2361},"origin":{"size":389},"symptoms":{"size":0},"value":{"size":953}},"frontmatter":{"status":"public","concepts":["Class","Type"],"shortDescription":"The type of an object is equivalent to the type defined by its class definition","shortCorrection":"A class definition does not define a type; all objects have type object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"PrototypesAreClasses","relation":"Related"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ConditionalOperatorNotExpression/","name":"ConditionalOperatorNotExpression","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":309},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Expression","Operator","Conditional","ControlFlow"],"shortDescription":"The conditional operator is not an expression","shortCorrection":"The conditional operator is not an expression","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ConstDeclarationCanBeLeftUninitialized/","name":"ConstDeclarationCanBeLeftUninitialized","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":480},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Assignment","Variable"],"shortDescription":"Declarations of constants do not need to be immediately initialized","shortCorrection":"Declarations of constants need to be immediately initialized","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ConstReferenceImpliesImmutability/","name":"ConstReferenceImpliesImmutability","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/ConstReferenceImpliesImmutability/image.jpg"},"correction":{"size":692},"origin":{"size":0},"symptoms":{"size":124},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Mutability","Reference"],"shortDescription":"An object referred to by a const variable is an immutable object","shortCorrection":"An object referred to by a const variable can be a mutable object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"FinalReferenceImpliesImmutability"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/EqualityOperatorComparesObjectsValues/","name":"EqualityOperatorComparesObjectsValues","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":503},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Equality","Object","Operator","Reference","Value"],"shortDescription":"The equality operator compares two objects' values","shortCorrection":"The equality operator compares two objects' references","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"AssignmentCopiesObject","relation":"Parallel (also about reference vs. value)"},{"id":"ObjectAsParameterIsCopied","relation":"Parallel (also about reference vs. value)"}],"inOtherPl":[{"id":"EqualityOperatorComparesObjectsValues"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/EqualityOperatorComparesOnlyTypes/","name":"EqualityOperatorComparesOnlyTypes","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":611},"origin":{"size":379},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Operator","Equality","Type","Value"],"shortDescription":"The equality operator '==' compares only the types of the operands","shortCorrection":"The equality operator '==' compares only the values of the operands","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"EqualityOperatorComparesOnlyTypes"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionAsValueWithParentheses/","name":"FunctionAsValueWithParentheses","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Function","Value","Call"],"shortDescription":"To use a function as a value, one needs to have parentheses after its name","shortCorrection":"To use a function as a value, one just needs to write its name","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionOverloading/","name":"FunctionOverloading","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/FunctionOverloading/image.jpg"},"correction":{"size":3045},"origin":{"size":256},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Function","Argument","Parameter"],"shortDescription":"It is possible to create multiple functions with the same name but with different signatures","shortCorrection":"It not is possible to create multiple functions with the same name but with different signatures","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NumberOfParametersMatchArguments","relation":"TogetherWith"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionsCannotBeImmediatelyInvoked/","name":"FunctionsCannotBeImmediatelyInvoked","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1373},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Function","Call","Scope"],"shortDescription":"Functions cannot be called in the expression in which they are defined","shortCorrection":"Functions can be immediately called in the expression in which they are defined","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionsMustBeNamed/","name":"FunctionsMustBeNamed","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":3493},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Function","Name","Scope"],"shortDescription":"Every function definition requires an associated name","shortCorrection":"One can define a function without associating a name to it","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ObjectsMustBeNamed"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/IdentifierAsStringInBracketNotation/","name":"IdentifierAsStringInBracketNotation","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":818},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Expression","String","Field","Object"],"shortDescription":"An identifier used to access a property with the bracket notation is treated as a string","shortCorrection":"An identifier used to access a property with the bracket notation is firstly evaluated","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/MandatoryAssignment/","name":"MandatoryAssignment","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":417},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Assignment","Expression","Statement"],"shortDescription":"An expression must be assigned to have a valid statement","shortCorrection":"An expression alone, without an assignment, is already a valid statement","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/MapInPlace/","name":"MapInPlace","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":0},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Return"],"shortDescription":"Map modifies the elements of the array on which it operates in place","shortCorrection":"Map returns a new array populated with the results of the callback function","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoAtomicExpression/","name":"NoAtomicExpression","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/NoAtomicExpression/image.png"},"correction":{"size":1489},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Expression","Operator","Literal","Variable"],"shortDescription":"Expressions must consist of more than one piece","shortCorrection":"A single piece, like a literal or name, also is an expression","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"NoAtomicExpression"},{"id":"NoAtomicExpression"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/JavaScript/NoBracketNotationForObjects/","name":"NoBracketNotationForObjects","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":184},"origin":{"size":152},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Object","Field"],"shortDescription":"Square brackets cannot be used to access properties of an object","shortCorrection":"Square brackets can be used to access properties of an object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoFunctionCallsChaining/","name":"NoFunctionCallsChaining","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":902},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Expression","Call","Function","Precedence"],"shortDescription":"It is not allowed to chain function calls","shortCorrection":"Multiple function calls can be chained together","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoGlobalObject/","name":"NoGlobalObject","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":613},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Object","Scope"],"shortDescription":"There isn't a global object","shortCorrection":"There is always a global object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoReturnValue/","name":"NoReturnValue","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":195},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Undefined","Return","Value"],"shortDescription":"Functions without return statements return no value at all","shortCorrection":"Functions without return statements return undefined","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/NullAndUndefinedAreTheSame/","name":"NullAndUndefinedAreTheSame","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/NullAndUndefinedAreTheSame/image.jpg"},"correction":{"size":365},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Type","Value","Equality","Null","Undefined"],"shortDescription":"The values null and undefined are the same","shortCorrection":"null and undefined are two distinct values","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NullIsObject","relation":"Related issue with null"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/NullIsObject/","name":"NullIsObject","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/NullIsObject/image.jpg"},"correction":{"size":553},"origin":{"size":213},"symptoms":{"size":124},"value":{"size":779}},"frontmatter":{"status":"public","concepts":["Null","Object","Reference","Value","Literal"],"shortDescription":"null is an object","shortCorrection":"null is a reference pointing to no object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NullAndUndefinedAreTheSame","relation":"Related issue with null"}],"inOtherPl":[{"id":"NullIsObject"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/NumberOfParametersMatchArguments/","name":"NumberOfParametersMatchArguments","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/NumberOfParametersMatchArguments/image.jpg"},"correction":{"size":1324},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Function","Call","Argument","Parameter"],"shortDescription":"Functions must be called with the same number of arguments as defined in their signature","shortCorrection":"Functions can be called with a different number of arguments as defined in their signature","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"FunctionOverloading","relation":"TogetherWith"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ObjectAsParameterIsCopied/","name":"ObjectAsParameterIsCopied","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":1065},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Argument","Parameter","Object","Reference"],"shortDescription":"Objects are passed by value","shortCorrection":"Objects are passed by reference","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"AssignmentCopiesObject","relation":"Parallel (also about reference vs. value)"},{"id":"EqualityOperatorComparesObjectsValues","relation":"Parallel (also about reference vs. value)"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/PrototypesAreClasses/","name":"PrototypesAreClasses","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/PrototypesAreClasses/image.jpg"},"correction":{"size":2420},"origin":{"size":1034},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Prototype","Class"],"shortDescription":"JavaScript is based on a class-based object model","shortCorrection":"JavaScript is based on a prototype-based object model","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ClassDefinesType","relation":"Related"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/StringRepetitionOperator/","name":"StringRepetitionOperator","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/StringRepetitionOperator/image.jpg"},"correction":{"size":172},"origin":{"size":142},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Number","Repetition"],"shortDescription":"One can repeat a String by multiplying it with a number","shortCorrection":"One cannot repeat a String by multiplying it with a number","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"StringRepetitionOperator"},{"id":"NoSequenceRepetition"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/ThisAssignable/","name":"ThisAssignable","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/ThisAssignable/image.jpg"},"correction":{"size":1493},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Variable","Reference","Assignment","Object","Mutability","Self"],"shortDescription":"One can assign to this","shortCorrection":"One cannot assign to this","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ThisAssignable"},{"id":"SelfAssignable"}],"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/TypeofArrayIsArray/","name":"TypeofArrayIsArray","pl":"JavaScript","image":{"relativePath":"default-misconception-image.jpg"},"correction":{"size":402},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Array","Type"],"shortDescription":"The typeof operator applied on an array returns 'array'","shortCorrection":"The typeof operator applied on an array returns 'object'","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/JavaScript/TypeofNullIsNull/","name":"TypeofNullIsNull","pl":"JavaScript","image":{"relativePath":"misconceptions/JavaScript/TypeofNullIsNull/image.jpg"},"correction":{"size":516},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["Value","Type"],"shortDescription":"The value null is of type 'null'","shortCorrection":"The value null is of type 'object'","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"ecma11"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/AssignCompares/","name":"AssignCompares","pl":"Python","image":{"relativePath":"misconceptions/Python/AssignCompares/image.jpg"},"correction":{"size":509},"origin":{"size":122},"symptoms":{"size":224},"value":{"size":200}},"frontmatter":{"status":"public","concepts":["Assignment","Equality","Expression","Operator"],"shortDescription":"= compares two values","shortCorrection":"= assigns a value to a variable","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"AssignCompares"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"plr3.13"},{"id":"plr3.13"},{"id":"plr3.13"}],"references":[{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"Python","image":{"relativePath":"misconceptions/Python/AssignmentCopiesObject/image.jpg"},"correction":{"size":1107},"origin":{"size":379},"symptoms":{"size":344},"value":{"size":1303}},"frontmatter":{"status":"public","concepts":["Allocation","Assignment","Object","Reference","Value","Variable"],"shortDescription":"Assignment copies the object","shortCorrection":"Assignment copies the reference to the object","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":[{"id":"VariablesHoldObjects","relation":"Possible cause"},{"id":"AssignCompares","relation":"A deeper misconception about assignment"}],"inOtherPl":[{"id":"AssignmentCopiesObject"},{"id":"AssignmentCopiesObject"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"},{"id":"plr3.13"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/CannotChainAttributeAccesses/","name":"CannotChainAttributeAccesses","pl":"Python","image":{"relativePath":"misconceptions/Python/CannotChainAttributeAccesses/image.jpg"},"correction":{"size":1341},"origin":{"size":289},"symptoms":{"size":468},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Method","Call","Field","Member","Expression","Operator"],"shortDescription":"Attribute accesses cannot be chained together","shortCorrection":"Attribute accesses can be chained together","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ObjectsMustBeNamed","relation":"If objects are named, there can be a name before a dot"},{"id":"CannotChainAttributeToObjectInstantiation","relation":"Another non-atomic expression in front of the dot"}],"inOtherPl":[{"id":"CannotChainMemberAccesses"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/CannotChainAttributeToObjectInstantiation/","name":"CannotChainAttributeToObjectInstantiation","pl":"Python","image":{"relativePath":"misconceptions/Python/CannotChainAttributeToObjectInstantiation/image.jpg"},"correction":{"size":1328},"origin":{"size":541},"symptoms":{"size":0},"value":{"size":227}},"frontmatter":{"status":"public","concepts":["Method","Field","Member","Constructor","Call","Expression","Operator"],"shortDescription":"Method calls, and attribute accesses in general, cannot be chained to a constructor invocation.","shortCorrection":"Method calls, and attribute accesses in general, can be chained to a constructor invocation.","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"CannotChainMemberToConstructor"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/ComparisonWithBoolLiteral/","name":"ComparisonWithBoolLiteral","pl":"Python","image":{"relativePath":"misconceptions/Python/ComparisonWithBoolLiteral/image.jpg"},"correction":{"size":1667},"origin":{"size":651},"symptoms":{"size":735},"value":{"size":241}},"frontmatter":{"status":"public","concepts":["Boolean","Equality","Evaluation","Expression","Literal","Operator"],"shortDescription":"To test whether an expression is True or False, one must compare it to True or to False","shortCorrection":"To test whether an expression is True or False, one can just use it","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":[{"id":"MapToBooleanWithTernaryOperator","relation":"Similar detour (via conditional operator)"},{"id":"MapToBooleanWithIf","relation":"Similar detour (via if statement)"},{"id":"NoAtomicExpression","relation":"Is a variable name alone an expression"},{"id":"ReturnCall","relation":"When used in return statement"}],"inOtherPl":[{"id":"ComparisonWithBooleanLiteral"},{"id":"CompareBooleanToConstant"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/ConditionalIsSequence/","name":"ConditionalIsSequence","pl":"Python","image":{"relativePath":"misconceptions/Python/ConditionalIsSequence/image.jpg"},"correction":{"size":1347},"origin":{"size":260},"symptoms":{"size":117},"value":{"size":701}},"frontmatter":{"status":"public","concepts":["Conditional","ControlFlow"],"shortDescription":"If-else is equivalent to sequence of two ifs","shortCorrection":"If-else can behave differently from sequence of two ifs","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"ConditionalIsSequence"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/DeferredReturn/","name":"DeferredReturn","pl":"Python","image":{"relativePath":"misconceptions/Python/DeferredReturn/image.jpg"},"correction":{"size":617},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":455}},"frontmatter":{"status":"public","concepts":["Return","ControlFlow","Function","Call"],"shortDescription":"A return statement in the middle of a function doesn't return immediately","shortCorrection":"A return statement immediately returns from the function","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"DeferredReturn"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/IfIsLoop/","name":"IfIsLoop","pl":"Python","image":{"relativePath":"misconceptions/Python/IfIsLoop/image.jpg"},"correction":{"size":632},"origin":{"size":0},"symptoms":{"size":167},"value":{"size":117}},"frontmatter":{"status":"public","concepts":["Conditional","Loop","ControlFlow"],"shortDescription":"The body of an if-statement executes repeatedly, as long as the condition holds","shortCorrection":"The body of an if-statement executes at most once","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"IfIsLoop"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/InitCreates/","name":"InitCreates","pl":"Python","image":{"relativePath":"misconceptions/Python/InitCreates/image.jpg"},"correction":{"size":393},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":902}},"frontmatter":{"status":"public","concepts":["Allocation","Call","Constructor"],"shortDescription":"__init__ must create a new object","shortCorrection":"__init__ does not create the object, it just initializes it","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ConstructorAllocates"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/InitReturnsObject/","name":"InitReturnsObject","pl":"Python","image":{"relativePath":"misconceptions/Python/InitReturnsObject/image.jpg"},"correction":{"size":241},"origin":{"size":657},"symptoms":{"size":163},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Allocation","Constructor","Call","Return"],"shortDescription":"__init__ needs to return an object","shortCorrection":"__init__ cannot return values other than None","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoEmptyInit","relation":"More general"},{"id":"InitCreates","relation":"Also about the role of __init__"}],"inOtherPl":[{"id":"ConstructorReturnsObject"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/MapToBooleanWithIf/","name":"MapToBooleanWithIf","pl":"Python","image":{"relativePath":"misconceptions/Python/MapToBooleanWithIf/image.jpg"},"correction":{"size":742},"origin":{"size":179},"symptoms":{"size":360},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Conditional","Statement","Boolean","Evaluation"],"shortDescription":"To map a boolean expression to a bool, an if statement is necessary","shortCorrection":"To map a boolean expression to a bool, one can just use it","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":[{"id":"MapToBooleanWithTernaryOperator","relation":"Same, but using ternary operator"},{"id":"ComparisonWithBoolLiteral","relation":"Similar detour (via comparison)"}],"inOtherPl":[{"id":"MapToBooleanWithIf"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/MapToBooleanWithTernaryOperator/","name":"MapToBooleanWithTernaryOperator","pl":"Python","image":{"relativePath":"misconceptions/Python/MapToBooleanWithTernaryOperator/image.jpg"},"correction":{"size":769},"origin":{"size":179},"symptoms":{"size":358},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Conditional","Expression","Operator","Boolean"],"shortDescription":"To map a boolean expression to a bool, a ternary conditional operator is necessary","shortCorrection":"To map a boolean expression to a bool, one can just use it","observed":null,"pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"MapToBooleanWithConditionalOperator"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/MultipleValuesReturn/","name":"MultipleValuesReturn","pl":"Python","image":{"relativePath":"misconceptions/Python/MultipleValuesReturn/image.jpg"},"correction":{"size":1180},"origin":{"size":932},"symptoms":{"size":0},"value":{"size":552}},"frontmatter":{"status":"public","concepts":["Value","Return","Function"],"shortDescription":"Functions can return multiple values","shortCorrection":"Functions can only return one value","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/NoAtomicExpression/","name":"NoAtomicExpression","pl":"Python","image":{"relativePath":"misconceptions/Python/NoAtomicExpression/image.png"},"correction":{"size":1469},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Expression","Operator","Literal","Variable"],"shortDescription":"Expressions must consist of more than one piece","shortCorrection":"A single piece, like a literal or name, also is an expression","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"NoAtomicExpression"},{"id":"NoAtomicExpression"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/NoEmptyInit/","name":"NoEmptyInit","pl":"Python","image":{"relativePath":"misconceptions/Python/NoEmptyInit/image.jpg"},"correction":{"size":739},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Constructor"],"shortDescription":"__init__ must do something","shortCorrection":"The body of __init__ can be empty","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"InitReturnsObject","relation":"Special case"}],"inOtherPl":[{"id":"NoEmptyConstructor"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/NoReservedWords/","name":"NoReservedWords","pl":"Python","image":{"relativePath":"misconceptions/Python/NoReservedWords/image.jpg"},"correction":{"size":265},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Name"],"shortDescription":"Every sequence of letters and digits starting with a letter or an underscore can be used as an identifier","shortCorrection":"Some character sequences are reserved for use as keywords and cannot be used as identifiers","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"NoReservedWords"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/NoSequenceRepetition/","name":"NoSequenceRepetition","pl":"Python","image":{"relativePath":"misconceptions/Python/NoSequenceRepetition/image.jpg"},"correction":{"size":298},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"draft","concepts":["String","Sequence","Number","Repetition"],"shortDescription":"There is no operator that repeats sequences","shortCorrection":"The * operator can be used to repeat sequences","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"StringRepetitionOperator"},{"id":"StringRepetitionOperator"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/NoShortCircuit/","name":"NoShortCircuit","pl":"Python","image":{"relativePath":"misconceptions/Python/NoShortCircuit/image.jpg"},"correction":{"size":171},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":482}},"frontmatter":{"status":"public","concepts":["Expression","Evaluation","Operator","Boolean","ControlFlow"],"shortDescription":"and/or always evaluate both operands","shortCorrection":"and/or evaluate their right operand only if absolutely necessary","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"NoShortCircuit"}],"expressibleInNms":[{"id":"ExpressionAsTree"},{"id":"ControlFlowAsGraph"}],"spec":[{"id":"plr3.13"}],"references":[{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/NoSingleLogicAnd/","name":"NoSingleLogicAnd","pl":"Python","image":{"relativePath":"misconceptions/Python/NoSingleLogicAnd/image.jpg"},"correction":{"size":912},"origin":{"size":0},"symptoms":{"size":148},"value":{"size":475}},"frontmatter":{"status":"public","concepts":["Boolean","Expression","Operator"],"shortDescription":"& is only a bitwise AND","shortCorrection":"& for boolean operands is a logical AND","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoShortCircuit","relation":"and seen as the only logic AND"}],"inOtherPl":[{"id":"NoSingleLogicAnd"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/ObjectsMustBeNamed/","name":"ObjectsMustBeNamed","pl":"Python","image":{"relativePath":"misconceptions/Python/ObjectsMustBeNamed/image.jpg"},"correction":{"size":1316},"origin":{"size":1231},"symptoms":{"size":234},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Allocation","Call","Expression","Constructor","Name","Object"],"shortDescription":"A variable is needed to instantiate an object","shortCorrection":"Objects have no name and can exist without a variable referring to them","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"CannotChainAttributeToObjectInstantiation","relation":"Possible consequence"},{"id":"NoAtomicExpression","relation":"Object instantiation not seen as expression"},{"id":"VariablesHoldObjects","relation":"Implied by"},{"id":"VariablesHoldExpressions","relation":"Maybe"}],"inOtherPl":[{"id":"ObjectsMustBeNamed"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/OutsideInFunctionNesting/","name":"OutsideInFunctionNesting","pl":"Python","image":{"relativePath":"misconceptions/Python/OutsideInFunctionNesting/image.jpg"},"correction":{"size":975},"origin":{"size":0},"symptoms":{"size":1014},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Call","Composition","ControlFlow","Expression","Function"],"shortDescription":"Nested function calls are invoked outside in","shortCorrection":"Nested function calls are invoked inside out","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":[{"id":"RightToLeftChaining","relation":"Evaluation order"}],"inOtherPl":[{"id":"OutsideInMethodNesting"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/ParenthesesOnlyIfArgument/","name":"ParenthesesOnlyIfArgument","pl":"Python","image":{"relativePath":"misconceptions/Python/ParenthesesOnlyIfArgument/image.jpg"},"correction":{"size":389},"origin":{"size":119},"symptoms":{"size":117},"value":{"size":434}},"frontmatter":{"status":"public","concepts":["Function","Call","Expression"],"shortDescription":"() are optional for function calls without arguments","shortCorrection":"() are mandatory even for function calls without arguments","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":[{"id":"ReturnCall","relation":"Also about need for parentheses"}],"inOtherPl":[{"id":"ParenthesesOnlyIfArgument"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":[{"id":null},{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/PlusConcatenatesNumbers/","name":"PlusConcatenatesNumbers","pl":"Python","image":{"relativePath":"misconceptions/Python/PlusConcatenatesNumbers/image.jpg"},"correction":{"size":1544},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":103}},"frontmatter":{"status":"draft","concepts":["String","Sequence","Number","Expression","Operator"],"shortDescription":"The plus operator can concatenate strings and numbers","shortCorrection":"The plus operator cannot concatenate strings and numbers","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/RecursiveFunctionNeedsIfElse/","name":"RecursiveFunctionNeedsIfElse","pl":"Python","image":{"relativePath":"misconceptions/Python/RecursiveFunctionNeedsIfElse/image.jpg"},"correction":{"size":893},"origin":{"size":581},"symptoms":{"size":0},"value":{"size":188}},"frontmatter":{"status":"public","concepts":["Conditional","ControlFlow","Recursion"],"shortDescription":"A recursive function needs to contain an if-else statement","shortCorrection":"A recursive function does not necessarily need to contain an if-else statement","observed":null,"pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"RecursiveMethodNeedsIfElse"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/ReturnCall/","name":"ReturnCall","pl":"Python","image":{"relativePath":"misconceptions/Python/ReturnCall/image.jpg"},"correction":{"size":727},"origin":{"size":0},"symptoms":{"size":771},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Call","Evaluation","Function","Return"],"shortDescription":"Return statements need () around the return value","shortCorrection":"Return statements do not need () around the return value","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":[{"id":"NoAtomicExpression","relation":"When parentheses only around non-atomic expressions"}],"inOtherPl":[{"id":"ReturnCall"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Python","image":{"relativePath":"misconceptions/Python/ReturnUnwindsMultipleFrames/image.jpg"},"correction":{"size":895},"origin":{"size":0},"symptoms":{"size":971},"value":{"size":1664}},"frontmatter":{"status":"public","concepts":["Call","Recursion","Return","Stack"],"shortDescription":"A return statement can unwind multiple call stack frames","shortCorrection":"A return statement pops exactly one call stack frame","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"ReturnUnwindsMultipleFrames"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/RightToLeftChaining/","name":"RightToLeftChaining","pl":"Python","image":{"relativePath":"misconceptions/Python/RightToLeftChaining/image.jpg"},"correction":{"size":1332},"origin":{"size":0},"symptoms":{"size":196},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Associativity","Call","ControlFlow","Evaluation","Expression","Field","Method"],"shortDescription":"Chained accesses are invoked from right to left","shortCorrection":"Chained accesses are invoked from left to right","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"RightToLeftChaining"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/SelfAssignable/","name":"SelfAssignable","pl":"Python","image":{"relativePath":"misconceptions/Python/SelfAssignable/image.jpg"},"correction":{"size":586},"origin":{"size":0},"symptoms":{"size":272},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Variable","Reference","Assignment","Object","Mutability","Self"],"shortDescription":"Reassigning self changes the object on which a method is called","shortCorrection":"Reassigning self does not change the object on which a method is called","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"InitCreates","relation":"When assigning to self in init"},{"id":"InitReturnsObject","relation":"Maybe"}],"inOtherPl":[{"id":"ThisAssignable"},{"id":"ThisAssignable"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/SelfNoExpression/","name":"SelfNoExpression","pl":"Python","image":{"relativePath":"misconceptions/Python/SelfNoExpression/image.jpg"},"correction":{"size":672},"origin":{"size":239},"symptoms":{"size":182},"value":{"size":182}},"frontmatter":{"status":"public","concepts":["Expression","Self"],"shortDescription":"The name self is not an expression","shortCorrection":"Even the name self on its own is an expression","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"NoAtomicExpression","relation":"General case"}],"inOtherPl":[{"id":"ThisNoExpression"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"},{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/StringLiteralNoObject/","name":"StringLiteralNoObject","pl":"Python","image":{"relativePath":"misconceptions/Python/StringLiteralNoObject/image.jpg"},"correction":{"size":746},"origin":{"size":0},"symptoms":{"size":263},"value":{"size":171}},"frontmatter":{"status":"public","concepts":["Expression","Literal","Name","String"],"shortDescription":"One needs to call str to instantiate a str object from a string literal","shortCorrection":"A string literal represents a str object and can be treated as such","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"StringLiteralNoObject"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"},{"id":"ExpressionAsTree"}],"spec":[{"id":"plr3.13"}],"references":null}},{"fields":{"slug":"/misconceptions/Python/VariablesHoldExpressions/","name":"VariablesHoldExpressions","pl":"Python","image":{"relativePath":"misconceptions/Python/VariablesHoldExpressions/image.jpg"},"correction":{"size":412},"origin":{"size":281},"symptoms":{"size":125},"value":{"size":468}},"frontmatter":{"status":"public","concepts":["Variable","Expression","Assignment","Value"],"shortDescription":"= stores an expression: it stores a reference to the expression in a variable","shortCorrection":"= evaluates an expression and stores a reference to its value in a variable","observed":"research","pytamaroActivityVersion":"v1","videoId":null,"related":null,"inOtherPl":[{"id":"VariablesHoldExpressions"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"},{"id":"plr3.13"}],"references":[{"id":null},{"id":null},{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Python/VariablesHoldObjects/","name":"VariablesHoldObjects","pl":"Python","image":{"relativePath":"misconceptions/Python/VariablesHoldObjects/image.jpg"},"correction":{"size":535},"origin":{"size":0},"symptoms":{"size":172},"value":{"size":187}},"frontmatter":{"status":"public","concepts":["Variable","Object","Reference","Value"],"shortDescription":"A variable contains a whole object","shortCorrection":"A variable contains a reference to an object","observed":null,"pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"AssignmentCopiesObject","relation":"Operational consequence"}],"inOtherPl":[{"id":"VariablesHoldObjects"}],"expressibleInNms":null,"spec":[{"id":"plr3.13"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Scratch/BaseCaseNotNeeded/","name":"BaseCaseNotNeeded","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/BaseCaseNotNeeded/image.jpg"},"correction":{"size":752},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":1065}},"frontmatter":{"status":"public","concepts":["Recursion","Conditional","Call"],"shortDescription":"Recursive computations do not necessarily need a base case","shortCorrection":"Recursive computations need a base case to terminate","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"BaseCaseNotNeeded"}],"expressibleInNms":null,"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/CompareBooleanToConstant/","name":"CompareBooleanToConstant","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/CompareBooleanToConstant/image.jpg"},"correction":{"size":3311},"origin":{"size":1329},"symptoms":{"size":0},"value":{"size":278}},"frontmatter":{"status":"public","concepts":["Boolean","Expression","Operator","Equality"],"shortDescription":"To test whether an expression evaluates to true or false, one must compare it to a constant","shortCorrection":"To test whether an expression evaluates to true or false, one can just use it","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ComparisonWithBooleanLiteral"},{"id":"ComparisonWithBoolLiteral"}],"expressibleInNms":[{"id":"ExpressionAsTree"}],"spec":[{"id":"scratch3.0"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Scratch/ConditionalIsSequence/","name":"ConditionalIsSequence","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/ConditionalIsSequence/image.jpg"},"correction":{"size":1063},"origin":{"size":0},"symptoms":{"size":84},"value":{"size":725}},"frontmatter":{"status":"public","concepts":["Conditional","ControlFlow"],"shortDescription":"If-then-else block is equivalent to sequence of two if-then blocks","shortCorrection":"If-then-else block can behave differently from sequence of two if-then blocks","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ConditionalIsSequence"},{"id":"ConditionalIsSequence"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/ElseAlwaysExecutes/","name":"ElseAlwaysExecutes","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/ElseAlwaysExecutes/image.jpg"},"correction":{"size":1056},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Conditional","ControlFlow"],"shortDescription":"The else branch of an if-then-else block always executes","shortCorrection":"The else branch of an if-then-else block only executes if the condition evaluates to false","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ElseAlwaysExecutes"}],"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/EqualityOperatorComparesListIdentities/","name":"EqualityOperatorComparesListIdentities","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/EqualityOperatorComparesListIdentities/image.jpg"},"correction":{"size":531},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":413}},"frontmatter":{"status":"public","concepts":["Equality","Reference","Object","Value","Expression"],"shortDescription":"(list a) = (list b) compares the identities of list a and list b","shortCorrection":"(list a) = (list b) compares the contents of list a and list b","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"EqualsComparesReferences"}],"expressibleInNms":[{"id":"StackHeapGlobalDiagram"}],"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/EqualityOperatorComparesOnlyTypes/","name":"EqualityOperatorComparesOnlyTypes","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/EqualityOperatorComparesOnlyTypes/image.jpg"},"correction":{"size":449},"origin":{"size":163},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Operator","Equality","Type","Value"],"shortDescription":"() = () compares only the types of its operands","shortCorrection":"() = () compares the values of its operands","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"EqualityOperatorComparesOnlyTypes"}],"expressibleInNms":null,"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/ExpressionAssigns/","name":"ExpressionAssigns","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/ExpressionAssigns/image.jpg"},"correction":{"size":812},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":1171}},"frontmatter":{"status":"public","concepts":["Expression","Assignment","Variable"],"shortDescription":"An expression that reads a variable also updates its value after the evaluation","shortCorrection":"A variable is only written using an assignment","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ExpressionAssigns"}],"expressibleInNms":null,"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/ListLengthCannotBeZero/","name":"ListLengthCannotBeZero","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/ListLengthCannotBeZero/image.jpg"},"correction":{"size":932},"origin":{"size":138},"symptoms":{"size":0},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Array"],"shortDescription":"A list cannot have a length of 0 items","shortCorrection":"A list can have a length of 0 items","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ArrayLengthCannotBeZero"}],"expressibleInNms":null,"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/ListsHomogeneous/","name":"ListsHomogeneous","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/ListsHomogeneous/image.jpg"},"correction":{"size":307},"origin":{"size":0},"symptoms":{"size":0},"value":{"size":964}},"frontmatter":{"status":"public","concepts":["Array","Type"],"shortDescription":"All items in a list must have the same type","shortCorrection":"A list can contain items of different types","observed":"no","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":[{"id":"ArrayElementsUntyped"}],"expressibleInNms":null,"spec":[{"id":"scratch3.0"}],"references":null}},{"fields":{"slug":"/misconceptions/Scratch/MissingElseTerminates/","name":"MissingElseTerminates","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/MissingElseTerminates/image.jpg"},"correction":{"size":1149},"origin":{"size":902},"symptoms":{"size":743},"value":{"size":0}},"frontmatter":{"status":"public","concepts":["Conditional","ControlFlow"],"shortDescription":"Blocks following an if without else will not execute if the condition is false","shortCorrection":"Blocks following an if without else will execute even if the condition is false","observed":"research","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"scratch3.0"}],"references":[{"id":null},{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Scratch/RepeatDistributes/","name":"RepeatDistributes","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/RepeatDistributes/image.jpg"},"correction":{"size":686},"origin":{"size":0},"symptoms":{"size":803},"value":{"size":287}},"frontmatter":{"status":"public","concepts":["Loop","ControlFlow"],"shortDescription":"Each block in a loop is repeated individually","shortCorrection":"The whole sequence of blocks in a loop is repeated","observed":"research","pytamaroActivityVersion":null,"videoId":null,"related":null,"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"scratch3.0"}],"references":[{"id":null},{"id":null}]}},{"fields":{"slug":"/misconceptions/Scratch/ResetStateEachLoopIteration/","name":"ResetStateEachLoopIteration","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/ResetStateEachLoopIteration/image.jpg"},"correction":{"size":1051},"origin":{"size":127},"symptoms":{"size":313},"value":{"size":228}},"frontmatter":{"status":"public","concepts":["Loop","ControlFlow"],"shortDescription":"The computation of all loop iterations starts from the state before the loop","shortCorrection":"The computation of a loop iteration starts from the state that is based on everything that happened before, including prior iterations of the loop","observed":"research","pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ResetStateEachProgramExecution","relation":"Different case for reset"}],"inOtherPl":null,"expressibleInNms":[{"id":"ControlFlowAsGraph"}],"spec":[{"id":"scratch3.0"}],"references":[{"id":null}]}},{"fields":{"slug":"/misconceptions/Scratch/ResetStateEachProgramExecution/","name":"ResetStateEachProgramExecution","pl":"Scratch","image":{"relativePath":"misconceptions/Scratch/ResetStateEachProgramExecution/image.jpg"},"correction":{"size":1115},"origin":{"size":127},"symptoms":{"size":835},"value":{"size":1049}},"frontmatter":{"status":"public","concepts":["Variable","Lifetime"],"shortDescription":"Running a Scratch program first resets the state of the world and then executes the program","shortCorrection":"Running a Scratch program executes the program starting with the world in its current state","observed":"research","pytamaroActivityVersion":null,"videoId":null,"related":[{"id":"ResetStateEachLoopIteration","relation":"Different case for reset"}],"inOtherPl":null,"expressibleInNms":null,"spec":[{"id":"scratch3.0"}],"references":[{"id":null}]}}]}},"pageContext":{}},
    "staticQueryHashes": ["3649515864","4169798128"]}