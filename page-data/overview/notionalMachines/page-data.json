{
    "componentChunkName": "component---src-pages-overview-notional-machines-js",
    "path": "/overview/notionalMachines/",
    "result": {"data":{"misconceptions":{"nodes":[{"fields":{"slug":"/misconceptions/Java/AbstractClassMustImplementAbstractMethod/","name":"AbstractClassMustImplementAbstractMethod","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/AbstractClassNoImplementation/","name":"AbstractClassNoImplementation","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/AddMemberAtRuntime/","name":"AddMemberAtRuntime","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"before and after of object on heap"}]}},{"fields":{"slug":"/misconceptions/Java/AllClassesHaveDefaultConstructor/","name":"AllClassesHaveDefaultConstructor","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/AnyClassException/","name":"AnyClassException","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ArithmeticPlusPrecedes/","name":"ArithmeticPlusPrecedes","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression using both operators"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayAccessWithParentheses/","name":"ArrayAccessWithParentheses","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving array access"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayAllocationWithoutNew/","name":"ArrayAllocationWithoutNew","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving array allocation"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayBracketCountIsLength/","name":"ArrayBracketCountIsLength","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression using array allocation and access"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayElementTypeRepeats/","name":"ArrayElementTypeRepeats","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"type of expression involving multi-dimensional array"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayElementsUntyped/","name":"ArrayElementsUntyped","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ArrayHasLengthMethod/","name":"ArrayHasLengthMethod","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"array on heap with length field"},{"id":"ExpressionAsTree","how":"expression involving array length access"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayInitializerContentsInBrackets/","name":"ArrayInitializerContentsInBrackets","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving array initializer"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayLengthCannotBeZero/","name":"ArrayLengthCannotBeZero","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ArrayLengthPartOfType/","name":"ArrayLengthPartOfType","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ArrayListIsArray/","name":"ArrayListIsArray","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"heap with array and ArrayList object"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayRankIsLength/","name":"ArrayRankIsLength","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"array of arrays on heap"},{"id":"ExpressionAsTree","how":"expression involving array of arrays and array length"}]}},{"fields":{"slug":"/misconceptions/Java/ArrayRankNotPartOfType/","name":"ArrayRankNotPartOfType","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ArraysGrow/","name":"ArraysGrow","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"array on heap with elements and length field"}]}},{"fields":{"slug":"/misconceptions/Java/AssignCompares/","name":"AssignCompares","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"contents of variable before and after assignment"},{"id":"ExpressionAsTree","how":"expression involving assignment operator"}]}},{"fields":{"slug":"/misconceptions/Java/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"variable and object on heap, before and after assignment"}]}},{"fields":{"slug":"/misconceptions/Java/AssignmentNotExpression/","name":"AssignmentNotExpression","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving assignment"}]}},{"fields":{"slug":"/misconceptions/Java/BaseCaseNotNeeded/","name":"BaseCaseNotNeeded","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/BaseCaseSelfRecursive/","name":"BaseCaseSelfRecursive","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/CallNotStaticallyChecked/","name":"CallNotStaticallyChecked","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/CallOnPrimitive/","name":"CallOnPrimitive","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving method call"}]}},{"fields":{"slug":"/misconceptions/Java/CallRequiresVariable/","name":"CallRequiresVariable","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving a method call"}]}},{"fields":{"slug":"/misconceptions/Java/CallWithoutFrame/","name":"CallWithoutFrame","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack before and after call"}]}},{"fields":{"slug":"/misconceptions/Java/CallerFrameContainsCalleeFormal/","name":"CallerFrameContainsCalleeFormal","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"caller and callee stack frames with variables and parameters"}]}},{"fields":{"slug":"/misconceptions/Java/CannotChainMemberAccesses/","name":"CannotChainMemberAccesses","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving chained member accesses"}]}},{"fields":{"slug":"/misconceptions/Java/CannotChainMemberToConstructor/","name":"CannotChainMemberToConstructor","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving member access chained to constructor call"}]}},{"fields":{"slug":"/misconceptions/Java/CatchAlwaysExecutes/","name":"CatchAlwaysExecutes","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method with try-catch"}]}},{"fields":{"slug":"/misconceptions/Java/CatchProvidesOptions/","name":"CatchProvidesOptions","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method with try-catch"}]}},{"fields":{"slug":"/misconceptions/Java/ChainedMethodsNotCalledFromOutside/","name":"ChainedMethodsNotCalledFromOutside","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving chained method calls"}]}},{"fields":{"slug":"/misconceptions/Java/CharNotNumeric/","name":"CharNotNumeric","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"numerical operation with char operand"}]}},{"fields":{"slug":"/misconceptions/Java/ComparisonWithBooleanLiteral/","name":"ComparisonWithBooleanLiteral","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving comparison of boolean subexpression to boolean literal"}]}},{"fields":{"slug":"/misconceptions/Java/CompositeExpressionsUntyped/","name":"CompositeExpressionsUntyped","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"typing of composite expression"}]}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassMustOverride/","name":"ConcreteClassMustOverride","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementClassAbstract/","name":"ConcreteClassOnlyImplementClassAbstract","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementDirectAbstract/","name":"ConcreteClassOnlyImplementDirectAbstract","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementInterfaceAbstract/","name":"ConcreteClassOnlyImplementInterfaceAbstract","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ConditionalIsSequence/","name":"ConditionalIsSequence","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"ifs-else vs. two consecutive ifs"}]}},{"fields":{"slug":"/misconceptions/Java/ConstructorAllocates/","name":"ConstructorAllocates","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"heap with object right before start of constructor"}]}},{"fields":{"slug":"/misconceptions/Java/ConstructorParameterIsField/","name":"ConstructorParameterIsField","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"constructor stack frame and object with instance variables"}]}},{"fields":{"slug":"/misconceptions/Java/ConstructorReturnsObject/","name":"ConstructorReturnsObject","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ConstructorWithoutNew/","name":"ConstructorWithoutNew","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving object allocation"}]}},{"fields":{"slug":"/misconceptions/Java/ControlledLocalAccess/","name":"ControlledLocalAccess","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/DeferredReturn/","name":"DeferredReturn","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method involving return statement"}]}},{"fields":{"slug":"/misconceptions/Java/ElsIf/","name":"ElsIf","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if-else-if with both conditions"}]}},{"fields":{"slug":"/misconceptions/Java/ElseAlwaysExecutes/","name":"ElseAlwaysExecutes","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of an if-else statement"}]}},{"fields":{"slug":"/misconceptions/Java/EqualityOperatorComparesObjectsValues/","name":"EqualityOperatorComparesObjectsValues","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"two reference variables and two heap objects"}]}},{"fields":{"slug":"/misconceptions/Java/EqualsComparesReferences/","name":"EqualsComparesReferences","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"two reference variables and two heap objects"}]}},{"fields":{"slug":"/misconceptions/Java/EvaluationResultsArePrinted/","name":"EvaluationResultsArePrinted","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"any expression"}]}},{"fields":{"slug":"/misconceptions/Java/ExceptionRoot/","name":"ExceptionRoot","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ExpressionAssigns/","name":"ExpressionAssigns","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"variable before and after access"},{"id":"ExpressionAsTree","how":"expression involving a variable access"}]}},{"fields":{"slug":"/misconceptions/Java/ExpressionsDynamicallyTyped/","name":"ExpressionsDynamicallyTyped","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"any expression"}]}},{"fields":{"slug":"/misconceptions/Java/FinalReferenceImpliesImmutability/","name":"FinalReferenceImpliesImmutability","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"final variable referring to heap object with instance variables"}]}},{"fields":{"slug":"/misconceptions/Java/ForEachIteratesOverIndices/","name":"ForEachIteratesOverIndices","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ForEachTraversesRecursiveStructure/","name":"ForEachTraversesRecursiveStructure","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ForEachVariableIsElement/","name":"ForEachVariableIsElement","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame with variable of enhanced for, heap with array or collection"}]}},{"fields":{"slug":"/misconceptions/Java/ForIsConditional/","name":"ForIsConditional","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a for loop"}]}},{"fields":{"slug":"/misconceptions/Java/ForVariableScopeBeyondLoop/","name":"ForVariableScopeBeyondLoop","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/FrameIsClassInstance/","name":"FrameIsClassInstance","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame and heap object"}]}},{"fields":{"slug":"/misconceptions/Java/IfIsLoop/","name":"IfIsLoop","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if statement"}]}},{"fields":{"slug":"/misconceptions/Java/IfRequiresElse/","name":"IfRequiresElse","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if without else"}]}},{"fields":{"slug":"/misconceptions/Java/ImmutableRequiresFinalParameters/","name":"ImmutableRequiresFinalParameters","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame with final parameters, heap object with final fields"}]}},{"fields":{"slug":"/misconceptions/Java/ImplicitInterfaceImplementation/","name":"ImplicitInterfaceImplementation","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/IntegerDivisionToRational/","name":"IntegerDivisionToRational","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving division of two integers"}]}},{"fields":{"slug":"/misconceptions/Java/InterfaceExtendClass/","name":"InterfaceExtendClass","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/LargeIntegerLong/","name":"LargeIntegerLong","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/LiteralNoExpression/","name":"LiteralNoExpression","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression consisting of just a literal"}]}},{"fields":{"slug":"/misconceptions/Java/LiteralString/","name":"LiteralString","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving a method call with a string literal as argument"}]}},{"fields":{"slug":"/misconceptions/Java/LocalVariablesAutoInitialized/","name":"LocalVariablesAutoInitialized","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame with local variables"}]}},{"fields":{"slug":"/misconceptions/Java/LoopBodyScopeImpliesLoopLifetime/","name":"LoopBodyScopeImpliesLoopLifetime","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/LoopTerminatingCondition/","name":"LoopTerminatingCondition","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph involving a loop"}]}},{"fields":{"slug":"/misconceptions/Java/MapToBooleanWithConditionalOperator/","name":"MapToBooleanWithConditionalOperator","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"boolean expression"}]}},{"fields":{"slug":"/misconceptions/Java/MapToBooleanWithIf/","name":"MapToBooleanWithIf","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/MethodAsField/","name":"MethodAsField","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object with fields"}]}},{"fields":{"slug":"/misconceptions/Java/MethodWithoutReturnType/","name":"MethodWithoutReturnType","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/MethodsWithoutClass/","name":"MethodsWithoutClass","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/MultiReferenceVariable/","name":"MultiReferenceVariable","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"reference variable referring to heap object"},{"id":"ExpressionAsTree","how":"value of expression involving reference variable access"}]}},{"fields":{"slug":"/misconceptions/Java/MultiValueVariable/","name":"MultiValueVariable","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"variable containing a value"},{"id":"ExpressionAsTree","how":"value of expression involving variable access"}]}},{"fields":{"slug":"/misconceptions/Java/MultidimensionalArray/","name":"MultidimensionalArray","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"array of arrays"},{"id":"ExpressionAsTree","how":"access of element of outer array nested array"}]}},{"fields":{"slug":"/misconceptions/Java/MultipleSuperclasses/","name":"MultipleSuperclasses","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/MustInitializeFieldInConstructor/","name":"MustInitializeFieldInConstructor","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"heap object before and after constructor"}]}},{"fields":{"slug":"/misconceptions/Java/NamedTypeParameter/","name":"NamedTypeParameter","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/NestedObjectsImplyNestedClasses/","name":"NestedObjectsImplyNestedClasses","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/NestedPackages/","name":"NestedPackages","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/NoAtomicExpression/","name":"NoAtomicExpression","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"atomic expression"}]}},{"fields":{"slug":"/misconceptions/Java/NoCallOnStringLiteral/","name":"NoCallOnStringLiteral","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving method call on string literal"}]}},{"fields":{"slug":"/misconceptions/Java/NoCastIfSameSize/","name":"NoCastIfSameSize","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving assignment of smaller bit-width value to larger bit-width variable"}]}},{"fields":{"slug":"/misconceptions/Java/NoCharEscape/","name":"NoCharEscape","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/NoEmptyConstructor/","name":"NoEmptyConstructor","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/NoFieldInheritance/","name":"NoFieldInheritance","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object with fields"},{"id":"ExpressionAsTree","how":"expression involving instance variable access"}]}},{"fields":{"slug":"/misconceptions/Java/NoFieldlessObjects/","name":"NoFieldlessObjects","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object without instance variables"}]}},{"fields":{"slug":"/misconceptions/Java/NoFloatLiterals/","name":"NoFloatLiterals","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving float literal"}]}},{"fields":{"slug":"/misconceptions/Java/NoImplicitWidening/","name":"NoImplicitWidening","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving assignment of value of smaller type to variable of bigger type"}]}},{"fields":{"slug":"/misconceptions/Java/NoInsideMethodCallInConstructor/","name":"NoInsideMethodCallInConstructor","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/NoJaggedArrays/","name":"NoJaggedArrays","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"array of arrays"},{"id":"ExpressionAsTree","how":"expression involving array length access of nested arrays"}]}},{"fields":{"slug":"/misconceptions/Java/NoLocalVariables/","name":"NoLocalVariables","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame with local variables"}]}},{"fields":{"slug":"/misconceptions/Java/NoLongLiterals/","name":"NoLongLiterals","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving long literal"}]}},{"fields":{"slug":"/misconceptions/Java/NoMethodInheritance/","name":"NoMethodInheritance","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving call of inherited method"}]}},{"fields":{"slug":"/misconceptions/Java/NoReservedWords/","name":"NoReservedWords","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/NoShortCircuit/","name":"NoShortCircuit","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving short-circuit operator"},{"id":"ControlFlowAsGraph","how":"graph of conditional involving short-circuit operator"}]}},{"fields":{"slug":"/misconceptions/Java/NoSingleLogicAnd/","name":"NoSingleLogicAnd","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving & on integers"}]}},{"fields":{"slug":"/misconceptions/Java/NoStringToString/","name":"NoStringToString","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving call of toString() on a string"}]}},{"fields":{"slug":"/misconceptions/Java/NullIsObject/","name":"NullIsObject","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"variable containing null"}]}},{"fields":{"slug":"/misconceptions/Java/NullPointerExceptionCompileTime/","name":"NullPointerExceptionCompileTime","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression with member access"},{"id":"StackHeapGlobalDiagram","how":"reference variable"}]}},{"fields":{"slug":"/misconceptions/Java/NumericToBooleanCoercion/","name":"NumericToBooleanCoercion","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving numeric subexpression"}]}},{"fields":{"slug":"/misconceptions/Java/ObjectsMustBeNamed/","name":"ObjectsMustBeNamed","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving object allocation"},{"id":"StackHeapGlobalDiagram","how":"labeling a heap object with the name of some variable"}]}},{"fields":{"slug":"/misconceptions/Java/OnlyInnermostArrayElements/","name":"OnlyInnermostArrayElements","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"nested array, variable directly referring to an inner array"},{"id":"ExpressionAsTree","how":"expression involving access of element of outer array of a nested array"}]}},{"fields":{"slug":"/misconceptions/Java/OutOfBoundsElementsAreNull/","name":"OutOfBoundsElementsAreNull","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"evaluation of expression accessing out-of-bounds array element"}]}},{"fields":{"slug":"/misconceptions/Java/OutsideInMethodNesting/","name":"OutsideInMethodNesting","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving nested method calls"}]}},{"fields":{"slug":"/misconceptions/Java/ParenthesesOnlyIfArgument/","name":"ParenthesesOnlyIfArgument","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving call of method without arguments"}]}},{"fields":{"slug":"/misconceptions/Java/PreIncrementBeforeLoop/","name":"PreIncrementBeforeLoop","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of for loop with pre-increment in update part"}]}},{"fields":{"slug":"/misconceptions/Java/PrimitiveIsObject/","name":"PrimitiveIsObject","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"variable storing primitive value"}]}},{"fields":{"slug":"/misconceptions/Java/PrimitiveTypeParameter/","name":"PrimitiveTypeParameter","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/PrimitiveVariablesDynamicallyTyped/","name":"PrimitiveVariablesDynamicallyTyped","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"primitive variable before and after assignment"},{"id":"ExpressionAsTree","how":"typing of expression involving primitive variable access"}]}},{"fields":{"slug":"/misconceptions/Java/PrivateAccessibleInSubclass/","name":"PrivateAccessibleInSubclass","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving superclass member access"}]}},{"fields":{"slug":"/misconceptions/Java/PrivateFieldsImplyImmutability/","name":"PrivateFieldsImplyImmutability","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object with fields"}]}},{"fields":{"slug":"/misconceptions/Java/PrivateFromOtherInstance/","name":"PrivateFromOtherInstance","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"two objects of the same class, instance method stack frame"}]}},{"fields":{"slug":"/misconceptions/Java/PrivateFromStatic/","name":"PrivateFromStatic","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object, static method stack frame"}]}},{"fields":{"slug":"/misconceptions/Java/PrivateMeansFinal/","name":"PrivateMeansFinal","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object with fields"}]}},{"fields":{"slug":"/misconceptions/Java/RationalLiterals/","name":"RationalLiterals","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving division of two integer literals"}]}},{"fields":{"slug":"/misconceptions/Java/RecursiveActivationsShareFrame/","name":"RecursiveActivationsShareFrame","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"two stack frames of recursive method calls"}]}},{"fields":{"slug":"/misconceptions/Java/RecursiveCallSiteNoReturn/","name":"RecursiveCallSiteNoReturn","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a tail-recursive method"}]}},{"fields":{"slug":"/misconceptions/Java/RecursiveMethodImpliesRecursiveType/","name":"RecursiveMethodImpliesRecursiveType","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/RecursiveMethodNeedsIfElse/","name":"RecursiveMethodNeedsIfElse","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a recursive method"}]}},{"fields":{"slug":"/misconceptions/Java/ReferenceIntoStack/","name":"ReferenceIntoStack","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"reference variable containing a reference value"}]}},{"fields":{"slug":"/misconceptions/Java/ReferenceToBooleanCoercion/","name":"ReferenceToBooleanCoercion","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving subexpression of reference type"}]}},{"fields":{"slug":"/misconceptions/Java/ReferenceToIntegerConversion/","name":"ReferenceToIntegerConversion","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving subexpression of reference type"}]}},{"fields":{"slug":"/misconceptions/Java/ReferenceToVariable/","name":"ReferenceToVariable","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"reference variable containing a reference value"}]}},{"fields":{"slug":"/misconceptions/Java/ReferringToRecursiveStructureMakesRecursive/","name":"ReferringToRecursiveStructureMakesRecursive","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ReturnCall/","name":"ReturnCall","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/RightToLeftChaining/","name":"RightToLeftChaining","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving chained member accesses"}]}},{"fields":{"slug":"/misconceptions/Java/RuntimeExceptionChecked/","name":"RuntimeExceptionChecked","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/SingleQuoteString/","name":"SingleQuoteString","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving String literal"}]}},{"fields":{"slug":"/misconceptions/Java/StackTraceIsCallHistory/","name":"StackTraceIsCallHistory","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack with stack frames after a method returned"}]}},{"fields":{"slug":"/misconceptions/Java/StaticCallPolymorphic/","name":"StaticCallPolymorphic","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/StaticDispatch/","name":"StaticDispatch","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/StringLengthField/","name":"StringLengthField","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"String object"},{"id":"ExpressionAsTree","how":"expression involving method call or field access"}]}},{"fields":{"slug":"/misconceptions/Java/StringLiteralNoObject/","name":"StringLiteralNoObject","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"String object, stack frame of String constructor with String argument"},{"id":"ExpressionAsTree","how":"expression involving String literal"}]}},{"fields":{"slug":"/misconceptions/Java/StringPlusStringifiesExpression/","name":"StringPlusStringifiesExpression","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving concatenation of String and non-String"}]}},{"fields":{"slug":"/misconceptions/Java/StringRepetitionOperator/","name":"StringRepetitionOperator","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving String and integer"}]}},{"fields":{"slug":"/misconceptions/Java/SubtypeCompatibleWithSupertype/","name":"SubtypeCompatibleWithSupertype","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"reference variable with given type referring to object of a supertype"}]}},{"fields":{"slug":"/misconceptions/Java/SuperAlwaysHasParentheses/","name":"SuperAlwaysHasParentheses","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving a super method call"}]}},{"fields":{"slug":"/misconceptions/Java/SuperNotFirstStatement/","name":"SuperNotFirstStatement","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a constructor with a super() call"}]}},{"fields":{"slug":"/misconceptions/Java/SuperclassObjectAllocated/","name":"SuperclassObjectAllocated","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"heap after allocating an object of a class that has a superclass"}]}},{"fields":{"slug":"/misconceptions/Java/SupertypeIncompatibleWithSubtype/","name":"SupertypeIncompatibleWithSubtype","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"reference variable of a given type referring to object of a subtype"}]}},{"fields":{"slug":"/misconceptions/Java/TargetTyping/","name":"TargetTyping","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"typing of numerical expression"}]}},{"fields":{"slug":"/misconceptions/Java/ThisAsField/","name":"ThisAsField","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object containing variables, stack frame containing variables"}]}},{"fields":{"slug":"/misconceptions/Java/ThisAssignable/","name":"ThisAssignable","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame containing this"},{"id":"ExpressionAsTree","how":"expression involving assignment"}]}},{"fields":{"slug":"/misconceptions/Java/ThisCanBeNull/","name":"ThisCanBeNull","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame containing this"},{"id":"ExpressionAsTree","how":"evaluation of expression involving this"}]}},{"fields":{"slug":"/misconceptions/Java/ThisExistsInStaticMethod/","name":"ThisExistsInStaticMethod","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame of a static method"}]}},{"fields":{"slug":"/misconceptions/Java/ThisInConstructorIsNull/","name":"ThisInConstructorIsNull","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame of a constructor with this"},{"id":"ExpressionAsTree","how":"expression involving this"}]}},{"fields":{"slug":"/misconceptions/Java/ThisNoExpression/","name":"ThisNoExpression","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"atomic expression this"}]}},{"fields":{"slug":"/misconceptions/Java/ToStringPrints/","name":"ToStringPrints","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ExpressionAsTree","how":"evaluation of expression involving toString() call"}]}},{"fields":{"slug":"/misconceptions/Java/TryCatchMandatory/","name":"TryCatchMandatory","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/TryFinishes/","name":"TryFinishes","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of method involving try block with multiple statements"}]}},{"fields":{"slug":"/misconceptions/Java/UndeclaredVariables/","name":"UndeclaredVariables","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/UnqualifiedNamesMustDiffer/","name":"UnqualifiedNamesMustDiffer","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/UntypedVariables/","name":"UntypedVariables","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"variable with type"}]}},{"fields":{"slug":"/misconceptions/Java/UseOfSelfTypeImpliesRecursiveType/","name":"UseOfSelfTypeImpliesRecursiveType","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/VariablesHoldExpressions/","name":"VariablesHoldExpressions","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"variable containing a value"},{"id":"ExpressionAsTree","how":"evaluation of expression with assignment where r-value is not a literal"}]}},{"fields":{"slug":"/misconceptions/Java/VariablesHoldObjects/","name":"VariablesHoldObjects","pl":"Java"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"object on the heap, variable of reference type containing a value"}]}},{"fields":{"slug":"/misconceptions/Java/VoidMethodNotRecursive/","name":"VoidMethodNotRecursive","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/VoidMethodReturnsValue/","name":"VoidMethodReturnsValue","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Java/ZeroDigitsCompress/","name":"ZeroDigitsCompress","pl":"Java"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/AccessingInexistentPropertyError/","name":"AccessingInexistentPropertyError","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ArrowFunctionNoImpliedReturn/","name":"ArrowFunctionNoImpliedReturn","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ArrowFunctionRequiresFunctionKeyword/","name":"ArrowFunctionRequiresFunctionKeyword","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"JavaScript"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/CallbackParametersInCaller/","name":"CallbackParametersInCaller","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/CharType/","name":"CharType","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ClassDefinesType/","name":"ClassDefinesType","pl":"JavaScript"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ConditionalOperatorNotExpression/","name":"ConditionalOperatorNotExpression","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ConstDeclarationCanBeLeftUninitialized/","name":"ConstDeclarationCanBeLeftUninitialized","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ConstReferenceImpliesImmutability/","name":"ConstReferenceImpliesImmutability","pl":"JavaScript"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/EqualityOperatorComparesObjectsValues/","name":"EqualityOperatorComparesObjectsValues","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/EqualityOperatorComparesOnlyTypes/","name":"EqualityOperatorComparesOnlyTypes","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionAsValueWithParentheses/","name":"FunctionAsValueWithParentheses","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionOverloading/","name":"FunctionOverloading","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionsCannotBeImmediatelyInvoked/","name":"FunctionsCannotBeImmediatelyInvoked","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/FunctionsMustBeNamed/","name":"FunctionsMustBeNamed","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/IdentifierAsStringInBracketNotation/","name":"IdentifierAsStringInBracketNotation","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/MandatoryAssignment/","name":"MandatoryAssignment","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/MapInPlace/","name":"MapInPlace","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoAtomicExpression/","name":"NoAtomicExpression","pl":"JavaScript"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoBracketNotationForObjects/","name":"NoBracketNotationForObjects","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoFunctionCallsChaining/","name":"NoFunctionCallsChaining","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoGlobalObject/","name":"NoGlobalObject","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NoReturnValue/","name":"NoReturnValue","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NullAndUndefinedAreTheSame/","name":"NullAndUndefinedAreTheSame","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NullIsObject/","name":"NullIsObject","pl":"JavaScript"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/NumberOfParametersMatchArguments/","name":"NumberOfParametersMatchArguments","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ObjectAsParameterIsCopied/","name":"ObjectAsParameterIsCopied","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/PrototypesAreClasses/","name":"PrototypesAreClasses","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/StringRepetitionOperator/","name":"StringRepetitionOperator","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/ThisAssignable/","name":"ThisAssignable","pl":"JavaScript"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/TypeofArrayIsArray/","name":"TypeofArrayIsArray","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/JavaScript/TypeofNullIsNull/","name":"TypeofNullIsNull","pl":"JavaScript"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/AssignCompares/","name":"AssignCompares","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"contents of variable before and after assignment"}]}},{"fields":{"slug":"/misconceptions/Python/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/CannotChainAttributeAccesses/","name":"CannotChainAttributeAccesses","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving chained member accesses"}]}},{"fields":{"slug":"/misconceptions/Python/CannotChainAttributeToObjectInstantiation/","name":"CannotChainAttributeToObjectInstantiation","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/ComparisonWithBoolLiteral/","name":"ComparisonWithBoolLiteral","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving comparison of boolean subexpression to boolean literal"}]}},{"fields":{"slug":"/misconceptions/Python/ConditionalIsSequence/","name":"ConditionalIsSequence","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/DeferredReturn/","name":"DeferredReturn","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method involving return statement"}]}},{"fields":{"slug":"/misconceptions/Python/IfIsLoop/","name":"IfIsLoop","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if statement"}]}},{"fields":{"slug":"/misconceptions/Python/InitCreates/","name":"InitCreates","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"heap with object right before start of constructor"}]}},{"fields":{"slug":"/misconceptions/Python/InitReturnsObject/","name":"InitReturnsObject","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/MapToBooleanWithIf/","name":"MapToBooleanWithIf","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/MapToBooleanWithTernaryOperator/","name":"MapToBooleanWithTernaryOperator","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"boolean expression"}]}},{"fields":{"slug":"/misconceptions/Python/MultipleValuesReturn/","name":"MultipleValuesReturn","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/NoAtomicExpression/","name":"NoAtomicExpression","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/NoEmptyInit/","name":"NoEmptyInit","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/NoReservedWords/","name":"NoReservedWords","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/NoSequenceRepetition/","name":"NoSequenceRepetition","pl":"Python"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/NoShortCircuit/","name":"NoShortCircuit","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving short-circuit operator"},{"id":"ControlFlowAsGraph","how":"graph of conditional involving short-circuit operator"}]}},{"fields":{"slug":"/misconceptions/Python/NoSingleLogicAnd/","name":"NoSingleLogicAnd","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving & on booleans"}]}},{"fields":{"slug":"/misconceptions/Python/ObjectsMustBeNamed/","name":"ObjectsMustBeNamed","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"labeling a heap object with the name of some variable"}]}},{"fields":{"slug":"/misconceptions/Python/OutsideInFunctionNesting/","name":"OutsideInFunctionNesting","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving nested method calls"}]}},{"fields":{"slug":"/misconceptions/Python/ParenthesesOnlyIfArgument/","name":"ParenthesesOnlyIfArgument","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving call of function without arguments"}]}},{"fields":{"slug":"/misconceptions/Python/PlusConcatenatesNumbers/","name":"PlusConcatenatesNumbers","pl":"Python"},"frontmatter":{"status":"draft","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/RecursiveFunctionNeedsIfElse/","name":"RecursiveFunctionNeedsIfElse","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/ReturnCall/","name":"ReturnCall","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/RightToLeftChaining/","name":"RightToLeftChaining","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/SelfAssignable/","name":"SelfAssignable","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"stack frame containing self"},{"id":"ExpressionAsTree","how":"expression involving assignment"}]}},{"fields":{"slug":"/misconceptions/Python/SelfNoExpression/","name":"SelfNoExpression","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"atomic expression self"}]}},{"fields":{"slug":"/misconceptions/Python/StringLiteralNoObject/","name":"StringLiteralNoObject","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"str object, stack frame of str constructor with str argument"},{"id":"ExpressionAsTree","how":"expression involving str literal"}]}},{"fields":{"slug":"/misconceptions/Python/VariablesHoldExpressions/","name":"VariablesHoldExpressions","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Python/VariablesHoldObjects/","name":"VariablesHoldObjects","pl":"Python"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Scratch/BaseCaseNotNeeded/","name":"BaseCaseNotNeeded","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Scratch/CompareBooleanToConstant/","name":"CompareBooleanToConstant","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving comparison of boolean subexpression to boolean literal"}]}},{"fields":{"slug":"/misconceptions/Scratch/ConditionalIsSequence/","name":"ConditionalIsSequence","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"CFG showing sequence of two ifs vs. an if-else"}]}},{"fields":{"slug":"/misconceptions/Scratch/ElseAlwaysExecutes/","name":"ElseAlwaysExecutes","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of an if-else statement"}]}},{"fields":{"slug":"/misconceptions/Scratch/EqualityOperatorComparesListIdentities/","name":"EqualityOperatorComparesListIdentities","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"StackHeapGlobalDiagram","how":"names referring to list \"objects\""}]}},{"fields":{"slug":"/misconceptions/Scratch/EqualityOperatorComparesOnlyTypes/","name":"EqualityOperatorComparesOnlyTypes","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Scratch/ExpressionAssigns/","name":"ExpressionAssigns","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Scratch/ListLengthCannotBeZero/","name":"ListLengthCannotBeZero","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Scratch/ListsHomogeneous/","name":"ListsHomogeneous","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":null}},{"fields":{"slug":"/misconceptions/Scratch/MissingElseTerminates/","name":"MissingElseTerminates","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of an if-else statement"}]}},{"fields":{"slug":"/misconceptions/Scratch/RepeatDistributes/","name":"RepeatDistributes","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a loop"}]}},{"fields":{"slug":"/misconceptions/Scratch/ResetStateEachLoopIteration/","name":"ResetStateEachLoopIteration","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a loop"}]}},{"fields":{"slug":"/misconceptions/Scratch/ResetStateEachProgramExecution/","name":"ResetStateEachProgramExecution","pl":"Scratch"},"frontmatter":{"status":"public","expressibleInNms":null}}]},"nms":{"nodes":[{"frontmatter":{"id":"ControlFlowAsGraph","url":"https://notionalmachines.github.io/nms/ControlFlowAsGraph-1-Sequence.html"}},{"frontmatter":{"id":"ExpressionAsTree","url":null}},{"frontmatter":{"id":"StackHeapGlobalDiagram","url":null}}]}},"pageContext":{}},
    "staticQueryHashes": ["3649515864","4169798128"]}