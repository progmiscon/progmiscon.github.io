{
    "componentChunkName": "component---src-templates-notional-machine-js",
    "path": "/notionalMachines/ControlFlowAsGraph/",
    "result": {"data":{"nm":{"slug":"nms/ControlFlowAsGraph","body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"type\": \"nm\",\n  \"id\": \"ControlFlowAsGraph\",\n  \"name\": \"Control Flow as Graph\",\n  \"shortDescription\": \"Represent execution paths through a method or function as a graph\",\n  \"url\": \"https://notionalmachines.github.io/nms/ControlFlowAsGraph-1-Sequence.html\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This notional machine represents method bodies as graphs.\\nStatements are represented as rectangles\\nand conditions as diamonds.\"), mdx(\"p\", null, \"This makes the possible execution paths through the different\\nstatements of a method visible\\nand is particularly useful for explaining\\ncompound statements (loops and conditional statements),\\nconditional expressions,\\nand exception handling.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"id":"ControlFlowAsGraph","name":"Control Flow as Graph","shortDescription":"Represent execution paths through a method or function as a graph","url":"https://notionalmachines.github.io/nms/ControlFlowAsGraph-1-Sequence.html"}},"mcs":{"nodes":[{"fields":{"slug":"/misconceptions/Java/CatchAlwaysExecutes/","name":"CatchAlwaysExecutes"},"frontmatter":{"shortDescription":"Catch blocks always get executed","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method with try-catch"}]}},{"fields":{"slug":"/misconceptions/Java/CatchProvidesOptions/","name":"CatchProvidesOptions"},"frontmatter":{"shortDescription":"Only the part of a catch block necessary to fix the cause of an exception is executed","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method with try-catch"}]}},{"fields":{"slug":"/misconceptions/Java/ConditionalIsSequence/","name":"ConditionalIsSequence"},"frontmatter":{"shortDescription":"If-else is equivalent to sequence of two ifs","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"ifs-else vs. two consecutive ifs"}]}},{"fields":{"slug":"/misconceptions/Java/DeferredReturn/","name":"DeferredReturn"},"frontmatter":{"shortDescription":"A return statement in the middle of a method doesn't return immediately","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method involving return statement"}]}},{"fields":{"slug":"/misconceptions/Java/ElsIf/","name":"ElsIf"},"frontmatter":{"shortDescription":"There is an elsif keyword for multi-way conditional statements","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if-else-if with both conditions"}]}},{"fields":{"slug":"/misconceptions/Java/ElseAlwaysExecutes/","name":"ElseAlwaysExecutes"},"frontmatter":{"shortDescription":"The else branch of an if-else statement always executes","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of an if-else statement"}]}},{"fields":{"slug":"/misconceptions/Java/ForIsConditional/","name":"ForIsConditional"},"frontmatter":{"shortDescription":"The body of a for statement executes at most once","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a for loop"}]}},{"fields":{"slug":"/misconceptions/Java/IfIsLoop/","name":"IfIsLoop"},"frontmatter":{"shortDescription":"The body of an if statement executes repeatedly, as long as the condition holds","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if statement"}]}},{"fields":{"slug":"/misconceptions/Java/IfRequiresElse/","name":"IfRequiresElse"},"frontmatter":{"shortDescription":"Every if statement requires an else","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if without else"}]}},{"fields":{"slug":"/misconceptions/Java/LoopTerminatingCondition/","name":"LoopTerminatingCondition"},"frontmatter":{"shortDescription":"For and while loops end when the condition becomes true","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph involving a loop"}]}},{"fields":{"slug":"/misconceptions/Java/NoShortCircuit/","name":"NoShortCircuit"},"frontmatter":{"shortDescription":"&& and || always evaluate both operands","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving short-circuit operator"},{"id":"ControlFlowAsGraph","how":"graph of conditional involving short-circuit operator"}]}},{"fields":{"slug":"/misconceptions/Java/PreIncrementBeforeLoop/","name":"PreIncrementBeforeLoop"},"frontmatter":{"shortDescription":"Pre-increment in update part of for loop means increment before loop body","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of for loop with pre-increment in update part"}]}},{"fields":{"slug":"/misconceptions/Java/RecursiveCallSiteNoReturn/","name":"RecursiveCallSiteNoReturn"},"frontmatter":{"shortDescription":"Tail-recursive call sites of non-void methods need no return statement","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a tail-recursive method"}]}},{"fields":{"slug":"/misconceptions/Java/RecursiveMethodNeedsIfElse/","name":"RecursiveMethodNeedsIfElse"},"frontmatter":{"shortDescription":"A recursive method needs to contain an if-else statement","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a recursive method"}]}},{"fields":{"slug":"/misconceptions/Java/SuperNotFirstStatement/","name":"SuperNotFirstStatement"},"frontmatter":{"shortDescription":"super() can be called anywhere in the constructor of a subclass","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a constructor with a super() call"}]}},{"fields":{"slug":"/misconceptions/Java/TryFinishes/","name":"TryFinishes"},"frontmatter":{"shortDescription":"Exceptions get thrown at the end of the try block","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of method involving try block with multiple statements"}]}},{"fields":{"slug":"/misconceptions/Python/DeferredReturn/","name":"DeferredReturn"},"frontmatter":{"shortDescription":"A return statement in the middle of a function doesn't return immediately","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"method involving return statement"}]}},{"fields":{"slug":"/misconceptions/Python/IfIsLoop/","name":"IfIsLoop"},"frontmatter":{"shortDescription":"The body of an if-statement executes repeatedly, as long as the condition holds","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of if statement"}]}},{"fields":{"slug":"/misconceptions/Python/NoShortCircuit/","name":"NoShortCircuit"},"frontmatter":{"shortDescription":"and/or always evaluate both operands","expressibleInNms":[{"id":"ExpressionAsTree","how":"expression involving short-circuit operator"},{"id":"ControlFlowAsGraph","how":"graph of conditional involving short-circuit operator"}]}},{"fields":{"slug":"/misconceptions/Scratch/ConditionalIsSequence/","name":"ConditionalIsSequence"},"frontmatter":{"shortDescription":"If-then-else block is equivalent to sequence of two if-then blocks","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"CFG showing sequence of two ifs vs. an if-else"}]}},{"fields":{"slug":"/misconceptions/Scratch/ElseAlwaysExecutes/","name":"ElseAlwaysExecutes"},"frontmatter":{"shortDescription":"The else branch of an if-then-else block always executes","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of an if-else statement"}]}},{"fields":{"slug":"/misconceptions/Scratch/MissingElseTerminates/","name":"MissingElseTerminates"},"frontmatter":{"shortDescription":"Blocks following an if without else will not execute if the condition is false","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of an if-else statement"}]}},{"fields":{"slug":"/misconceptions/Scratch/RepeatDistributes/","name":"RepeatDistributes"},"frontmatter":{"shortDescription":"Each block in a loop is repeated individually","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a loop"}]}},{"fields":{"slug":"/misconceptions/Scratch/ResetStateEachLoopIteration/","name":"ResetStateEachLoopIteration"},"frontmatter":{"shortDescription":"The computation of all loop iterations starts from the state before the loop","expressibleInNms":[{"id":"ControlFlowAsGraph","how":"graph of a loop"}]}}]}},"pageContext":{"name":"ControlFlowAsGraph","slug":"nms/ControlFlowAsGraph"}},
    "staticQueryHashes": ["3281885743","3649515864","4169798128"]}