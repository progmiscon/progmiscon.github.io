{
    "componentChunkName": "component---src-templates-textbook-js",
    "path": "/textbooks/dragon/",
    "result": {"data":{"allMdx":{"nodes":[{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Compilers: Principles, Techniques, and Tools\",\n  \"author\": \"Alfred Aho, Ravi Sethi, Jeffrey Ullman, Monica S. Lam\",\n  \"edition\": \"2nd Edition\",\n  \"home\": \"https://suif.stanford.edu/dragonbook/\",\n  \"status\": \"draft\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is a computer science textbook about compiler construction for programming languages. First published in 1986, it is widely regarded as the classic definitive compiler technology text.\"), mdx(\"p\", null, \"In the time since the 1986 edition, the world of compiler design\\nhas changed signicantly. Programming languages have evolved to present new\\ncompilation problems. Computer architectures offer a variety of resources of\\nwhich the compiler designer must take advantage. Perhaps most interestingly, the venerable technology of code optimization has found use outside compilers.\\nIt is now used in tools that find bugs in software, and most importantly, and\\nsecurity holes in existing code. And much of the \\u201Cfront-end\\u201D technology -\\ngrammars, regular expressions, parsers, and syntax-directed translators - are\\nstill in wide use.\"), mdx(\"p\", null, \"Thus, the philosophy from previous versions of the book has not changed.\\nIt recognizes that few readers will build, or even maintain, a compiler for a\\nmajor programming language. Yet the models, theory, and algorithms associated with a compiler can be applied to a wide range of problems in software\\ndesign and software development. The book therefore emphasizes problems that are\\nmost commonly encountered in designing a language processor, regardless of\\nthe source language or target machine.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Compilers: Principles, Techniques, and Tools","subtitle":null,"edition":"2nd Edition","pl":null,"language":null,"home":"https://suif.stanford.edu/dragonbook/","baseUrl":null,"author":"Alfred Aho, Ravi Sethi, Jeffrey Ullman, Monica S. Lam","sections":null},"parent":{"name":"dragon"}}]}},"pageContext":{"glob":"**/src/data/textbooks/dragon.md"}},
    "staticQueryHashes": ["3649515864","4169798128"]}