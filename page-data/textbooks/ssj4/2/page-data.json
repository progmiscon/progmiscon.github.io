{
    "componentChunkName": "component---src-templates-textbook-section-js",
    "path": "/textbooks/ssj4/2",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"title":"Sprechen Sie Java","subtitle":"Eine Einführung in das systematische Programmieren","edition":"4. Auflage","pl":"Java","home":"https://ssw.jku.at/Misc/JavaBuch/","baseUrl":null,"sections":[{"section":"1","title":"Grundlagen","url":null},{"section":"2","title":"Einfache Programme","url":null},{"section":"3","title":"Verzweigungen","url":null},{"section":"4","title":"Schleifen","url":null},{"section":"5","title":"Gleitkommazahlen","url":null},{"section":"6","title":"Methoden","url":null},{"section":"7","title":"Arrays","url":null},{"section":"8","title":"Zeichen","url":null},{"section":"9","title":"Strings","url":null},{"section":"10","title":"Klassen","url":null},{"section":"11","title":"Objektorientierung","url":null},{"section":"12","title":"Dynamische Datenstrukturen","url":null},{"section":"13","title":"Vererbung","url":null},{"section":"14","title":"Enumerationstypen","url":null},{"section":"15","title":"Generizität","url":null},{"section":"16","title":"Rekursion","url":null},{"section":"17","title":"Schrittweise Verfeinerung","url":null},{"section":"18","title":"Pakete","url":null},{"section":"19","title":"Ausnahmebehandlung","url":null},{"section":"20","title":"Threads","url":null},{"section":"21","title":"Annotationen","url":null},{"section":"22","title":"Auszug aus der Java-Klassenbibliothek","url":null},{"section":"23","title":"Ausblick","url":null}]},"parent":{"name":"ssj4"}}]},"mcs":{"nodes":[{"fields":{"slug":"/misconceptions/Java/AssignCompares/","name":"AssignCompares"},"frontmatter":{"shortDescription":"= compares two values","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/AssignmentNotExpression/","name":"AssignmentNotExpression"},"frontmatter":{"shortDescription":"An assignment a=b is not an expression","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/CompositeExpressionsUntyped/","name":"CompositeExpressionsUntyped"},"frontmatter":{"shortDescription":"Expressions that consist of multiple parts have no type","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/CharNotNumeric/","name":"CharNotNumeric"},"frontmatter":{"shortDescription":"Char is not a numeric type","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/ConditionalIsSequence/","name":"ConditionalIsSequence"},"frontmatter":{"shortDescription":"If-else is equivalent to sequence of two ifs","text":[{"id":"ofj6","sections":["2"]},{"id":"ssj4","sections":["1"]}]}},{"fields":{"slug":"/misconceptions/Java/EvaluationResultsArePrinted/","name":"EvaluationResultsArePrinted"},"frontmatter":{"shortDescription":"Evaluating an expression means outputting its result","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/ExpressionsDynamicallyTyped/","name":"ExpressionsDynamicallyTyped"},"frontmatter":{"shortDescription":"One has to evaluate an expression to determine its type","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/IfIsLoop/","name":"IfIsLoop"},"frontmatter":{"shortDescription":"The body of an if statement executes repeatedly, as long as the condition holds","text":[{"id":"ofj6","sections":["2"]},{"id":"ssj4","sections":["1"]}]}},{"fields":{"slug":"/misconceptions/Java/LargeIntegerLong/","name":"LargeIntegerLong"},"frontmatter":{"shortDescription":"Large integer numbers have type long","text":[{"id":"ofj6","sections":["10"]},{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/LiteralNoExpression/","name":"LiteralNoExpression"},"frontmatter":{"shortDescription":"A literal is not an expression","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/LiteralString/","name":"LiteralString"},"frontmatter":{"shortDescription":"When passing a literal string as argument to a method, no quotes are needed","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/LocalVariablesAutoInitialized/","name":"LocalVariablesAutoInitialized"},"frontmatter":{"shortDescription":"Local variables are automatically initialized","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/NoAtomicExpression/","name":"NoAtomicExpression"},"frontmatter":{"shortDescription":"Expressions must consist of more than one piece","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/NoCharEscape/","name":"NoCharEscape"},"frontmatter":{"shortDescription":"\\ is a normal character in char and String literals","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/NoLongLiterals/","name":"NoLongLiterals"},"frontmatter":{"shortDescription":"There are no long literals","text":[{"id":"ofj6","sections":["10"]},{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/NoReservedWords/","name":"NoReservedWords"},"frontmatter":{"shortDescription":"Every sequence of letters and digits starting with a letter can be used as an identifier","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/SingleQuoteString/","name":"SingleQuoteString"},"frontmatter":{"shortDescription":"String literals can be in single quotes","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/StringLiteralNoObject/","name":"StringLiteralNoObject"},"frontmatter":{"shortDescription":"One needs to call the String constructor to get a String object from a literal","text":[{"id":"ofj6","sections":["1","2"]},{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/TargetTyping/","name":"TargetTyping"},"frontmatter":{"shortDescription":"The type of a numerical expression depends on the type expected by the surrounding context","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/UndeclaredVariables/","name":"UndeclaredVariables"},"frontmatter":{"shortDescription":"Variables can be used even without being declared beforehand","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/UntypedVariables/","name":"UntypedVariables"},"frontmatter":{"shortDescription":"Variable declarations don't need a type","text":[{"id":"ssj4","sections":["1"]},{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/VariablesHoldExpressions/","name":"VariablesHoldExpressions"},"frontmatter":{"shortDescription":"= stores an expression in a variable","text":[{"id":"ssj4","sections":["2"]}]}},{"fields":{"slug":"/misconceptions/Java/ZeroDigitsCompress/","name":"ZeroDigitsCompress"},"frontmatter":{"shortDescription":"In integer numbers, decimal digits with value `0` take less storage than decimal digits with other values","text":[{"id":"ssj4","sections":["2"]}]}}]}},"pageContext":{"glob":"**/src/data/textbooks/ssj4.md","textbookId":"ssj4","sectionId":"2"}},
    "staticQueryHashes": ["3649515864","4169798128"]}