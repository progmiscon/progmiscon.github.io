{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/ComparisonWithBooleanLiteral/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"public\",\n  \"shortDescription\": \"To test whether an expression is true or false, one must compare it to true or to false\",\n  \"shortCorrection\": \"To test whether an expression is true or false, one can just use it\",\n  \"concepts\": [\"Boolean\", \"Expression\", \"Operator\", \"Equality\"],\n  \"related\": [{\n    \"id\": \"MapToBooleanWithConditionalOperator\",\n    \"relation\": \"Similar detour (via conditional operator)\"\n  }, {\n    \"id\": \"MapToBooleanWithIf\",\n    \"relation\": \"Similar detour (via if statement)\"\n  }, {\n    \"id\": \"NoAtomicExpression\",\n    \"relation\": \"Is a variable name alone an expression\"\n  }, {\n    \"id\": \"ReturnCall\",\n    \"relation\": \"When used in return statement\"\n  }],\n  \"inOtherPl\": [{\n    \"pl\": \"Python\",\n    \"id\": \"ComparisonWithBoolLiteral\"\n  }, {\n    \"pl\": \"Scratch\",\n    \"id\": \"CompareBooleanToConstant\"\n  }],\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"15.21.2\", \"15\", \"4.2.5\"]\n  }],\n  \"plVersion\": null,\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"expression involving comparison of boolean subexpression to boolean literal\"\n  }],\n  \"text\": [{\n    \"id\": \"ofj6\",\n    \"sections\": [\"2\"]\n  }],\n  \"references\": [{\n    \"citationKey\": \"chiodiniSurveyingUpperSecondaryTeachers2025\",\n    \"phenomena\": [\"CWBL\"]\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To determine whether an expression evaluates to \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"true\"), \" or \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"false\"), \",\\none must use a relational operator (\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"==\"), \" or \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"!=\"), \")\\nto compare with a boolean literal (\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"true\"), \" or \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"false\"), \").\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: public\nshortDescription: \"To test whether an expression is true or false, one must compare it to true or to false\"\nshortCorrection: \"To test whether an expression is true or false, one can just use it\"\nconcepts:\n  - Boolean\n  - Expression\n  - Operator\n  - Equality\nrelated:\n  - id: MapToBooleanWithConditionalOperator\n    relation: Similar detour (via conditional operator)\n  - id: MapToBooleanWithIf\n    relation: Similar detour (via if statement)\n  - id: NoAtomicExpression\n    relation: Is a variable name alone an expression\n  - id: ReturnCall\n    relation: When used in return statement\ninOtherPl:\n  - pl: Python\n    id: ComparisonWithBoolLiteral\n  - pl: Scratch\n    id: CompareBooleanToConstant\nspec:\n  - id: jls21\n    sections: [\"15.21.2\", \"15\", \"4.2.5\"]\nplVersion:\n# from: jls8\n# to: jls14\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: expression involving comparison of boolean subexpression to boolean literal\ntext:\n  - id: ofj6\n    sections: [\"2\"]\nreferences:\n  - citationKey: chiodiniSurveyingUpperSecondaryTeachers2025\n    phenomena: [CWBL]\n---\n\nTo determine whether an expression evaluates to `true` or `false`,\none must use a relational operator (`==` or `!=`)\nto compare with a boolean literal (`true` or `false`).\n","fields":{"name":"ComparisonWithBooleanLiteral","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#c89868","images":{"fallback":{"src":"/static/cf9f15ded68d6675767fe352cf4506bd/f6810/image.jpg","srcSet":"/static/cf9f15ded68d6675767fe352cf4506bd/37bba/image.jpg 750w,\n/static/cf9f15ded68d6675767fe352cf4506bd/61c72/image.jpg 1080w,\n/static/cf9f15ded68d6675767fe352cf4506bd/d61e8/image.jpg 1366w,\n/static/cf9f15ded68d6675767fe352cf4506bd/f6810/image.jpg 1600w","sizes":"100vw"},"sources":[{"srcSet":"/static/cf9f15ded68d6675767fe352cf4506bd/a66aa/image.webp 750w,\n/static/cf9f15ded68d6675767fe352cf4506bd/65dd5/image.webp 1080w,\n/static/cf9f15ded68d6675767fe352cf4506bd/4fad6/image.webp 1366w,\n/static/cf9f15ded68d6675767fe352cf4506bd/e9d78/image.webp 1600w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/cf9f15ded68d6675767fe352cf4506bd/f7f54/image.jpg","height":512}}}},"frontmatter":{"shortDescription":"To test whether an expression is true or false, one must compare it to true or to false","shortCorrection":"To test whether an expression is true or false, one can just use it","status":"public","concepts":["Boolean","Expression","Operator","Equality"]}}},"pageContext":{"slug":"/misconceptions/Java/ComparisonWithBooleanLiteral/"}},
    "staticQueryHashes": ["4169798128"]}