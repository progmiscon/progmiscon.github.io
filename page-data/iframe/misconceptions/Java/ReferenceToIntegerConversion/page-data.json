{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/ReferenceToIntegerConversion/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"draft\",\n  \"shortDescription\": \"One can cast between references and ints\",\n  \"shortCorrection\": \"One cannot cast between references and ints\",\n  \"concepts\": [\"Reference\", \"Type\", \"Number\"],\n  \"related\": [{\n    \"id\": \"ReferenceToBooleanCoercion\",\n    \"relation\": \"To boolean instead of integer\"\n  }],\n  \"inOtherPl\": null,\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"4.2.1\", \"5.1\", \"5.1.8\"]\n  }],\n  \"plVersion\": null,\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"expression involving subexpression of reference type\"\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can get the address of an object\\nby converting an object reference to an int,\\nand you can convert the address of an object,\\ngiven as an int,\\nto an object reference.\\nE.g., \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Object o = (Object)12345678;\"), \"\\nor \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"int i = (int)new Object();\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: draft\nshortDescription: \"One can cast between references and ints\"\nshortCorrection: \"One cannot cast between references and ints\"\nconcepts:\n  - Reference\n  - Type\n  - Number\nrelated:\n  - id: ReferenceToBooleanCoercion\n    relation: To boolean instead of integer\ninOtherPl:\n# - pl: JavaScript\n#   id: ReferenceToIntegerConversion\n# - pl: Python\n#   id: ReferenceToIntegerConversion\nspec:\n  - id: jls21\n    sections: [\"4.2.1\", \"5.1\", \"5.1.8\"]\nplVersion:\n# from: jls8\n# to: jls14\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: expression involving subexpression of reference type\n---\n\nYou can get the address of an object\nby converting an object reference to an int,\nand you can convert the address of an object,\ngiven as an int,\nto an object reference.\nE.g., `Object o = (Object)12345678;`\nor `int i = (int)new Object();`.\n","fields":{"name":"ReferenceToIntegerConversion","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8a878","images":{"fallback":{"src":"/static/40c6db1530671c3291cbfc14f247de04/1e21a/default-misconception-image.jpg","srcSet":"/static/40c6db1530671c3291cbfc14f247de04/37bba/default-misconception-image.jpg 750w,\n/static/40c6db1530671c3291cbfc14f247de04/1e21a/default-misconception-image.jpg 800w","sizes":"100vw"},"sources":[{"srcSet":"/static/40c6db1530671c3291cbfc14f247de04/a66aa/default-misconception-image.webp 750w,\n/static/40c6db1530671c3291cbfc14f247de04/b2a35/default-misconception-image.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/40c6db1530671c3291cbfc14f247de04/f7f54/default-misconception-image.jpg","height":512}}}},"frontmatter":{"shortDescription":"One can cast between references and ints","shortCorrection":"One cannot cast between references and ints","status":"draft","concepts":["Reference","Type","Number"]}}},"pageContext":{"slug":"/misconceptions/Java/ReferenceToIntegerConversion/"}},
    "staticQueryHashes": ["4169798128"]}