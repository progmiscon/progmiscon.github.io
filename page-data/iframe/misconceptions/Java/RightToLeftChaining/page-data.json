{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/RightToLeftChaining/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"public\",\n  \"shortDescription\": \"Chained accesses are invoked from right to left\",\n  \"shortCorrection\": \"Chained accesses are invoked from left to right\",\n  \"concepts\": [\"Method\", \"Call\", \"Field\", \"Member\", \"Expression\", \"Operator\", \"Associativity\"],\n  \"related\": [{\n    \"id\": \"OutsideInMethodNesting\",\n    \"relation\": \"Evaluation order\"\n  }, {\n    \"id\": \"CannotChainMemberAccesses\",\n    \"relation\": \"Also about member accesses\"\n  }, {\n    \"id\": \"CannotChainMemberToConstructor\",\n    \"relation\": \"Also about member accesses\"\n  }],\n  \"inOtherPl\": [{\n    \"pl\": \"Python\",\n    \"id\": \"RightToLeftChaining\"\n  }],\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"15.11\", \"15.12\"]\n  }],\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"expression involving chained member accesses\"\n  }],\n  \"references\": [{\n    \"citationKey\": \"bevilacquaAssessingUnderstandingExpressions2024\",\n    \"phenomena\": [\"TreeIsChainInSourceOrder\"]\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When chaining methods or fields, like with \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"a().b()\"), \", \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"a.b()\"), \", \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"a().b\"), \" or \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"a.b\"), \",\\nmembers are accessed from right to left (first the right most member).\\nAlso when an object instantiation is involved , e.g., \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"new C().a()\"), \",\\nthe right member of a chaining operation does have precedence\\nover the object instantiation (\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"new C()\"), \").\\nTherefore statements such as \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"new C().a()\"), \" are invalid:\\nvalid code is instead \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"(new C()).a()\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: public\nshortDescription: \"Chained accesses are invoked from right to left\"\nshortCorrection: \"Chained accesses are invoked from left to right\"\nconcepts:\n  - Method\n  - Call\n  - Field\n  - Member\n  - Expression\n  - Operator\n  - Associativity\nrelated:\n  - id: OutsideInMethodNesting\n    relation: Evaluation order\n  - id: CannotChainMemberAccesses\n    relation: Also about member accesses\n  - id: CannotChainMemberToConstructor\n    relation: Also about member accesses\ninOtherPl:\n  # - pl: JavaScript\n  #   id: RightToLeftChaining\n  - pl: Python\n    id: RightToLeftChaining\nspec:\n  - id: jls21\n    sections: [\"15.11\", \"15.12\"]\n#plVersion:\n# from: jls8\n# to: jls14\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: expression involving chained member accesses\nreferences:\n  - citationKey: bevilacquaAssessingUnderstandingExpressions2024\n    phenomena: [TreeIsChainInSourceOrder]\n---\n\nWhen chaining methods or fields, like with `a().b()`, `a.b()`, `a().b` or `a.b`,\nmembers are accessed from right to left (first the right most member).\nAlso when an object instantiation is involved , e.g., `new C().a()`,\nthe right member of a chaining operation does have precedence\nover the object instantiation (`new C()`).\nTherefore statements such as `new C().a()` are invalid:\nvalid code is instead `(new C()).a()`.\n","fields":{"name":"RightToLeftChaining","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8a878","images":{"fallback":{"src":"/static/7a3da4c484efc8ff9d584fee42b55cb8/f6810/image.jpg","srcSet":"/static/7a3da4c484efc8ff9d584fee42b55cb8/37bba/image.jpg 750w,\n/static/7a3da4c484efc8ff9d584fee42b55cb8/61c72/image.jpg 1080w,\n/static/7a3da4c484efc8ff9d584fee42b55cb8/d61e8/image.jpg 1366w,\n/static/7a3da4c484efc8ff9d584fee42b55cb8/f6810/image.jpg 1600w","sizes":"100vw"},"sources":[{"srcSet":"/static/7a3da4c484efc8ff9d584fee42b55cb8/a66aa/image.webp 750w,\n/static/7a3da4c484efc8ff9d584fee42b55cb8/65dd5/image.webp 1080w,\n/static/7a3da4c484efc8ff9d584fee42b55cb8/4fad6/image.webp 1366w,\n/static/7a3da4c484efc8ff9d584fee42b55cb8/e9d78/image.webp 1600w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/7a3da4c484efc8ff9d584fee42b55cb8/f7f54/image.jpg","height":512}}}},"frontmatter":{"shortDescription":"Chained accesses are invoked from right to left","shortCorrection":"Chained accesses are invoked from left to right","status":"public","concepts":["Method","Call","Field","Member","Expression","Operator","Associativity"]}}},"pageContext":{"slug":"/misconceptions/Java/RightToLeftChaining/"}},
    "staticQueryHashes": ["4169798128"]}