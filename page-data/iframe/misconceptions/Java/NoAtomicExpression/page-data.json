{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/NoAtomicExpression/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"public\",\n  \"shortDescription\": \"Expressions must consist of more than one piece\",\n  \"shortCorrection\": \"A single piece, like a literal or name, also is an expression\",\n  \"concepts\": [\"Expression\", \"Operator\", \"Literal\", \"Variable\"],\n  \"related\": [{\n    \"id\": \"ObjectsMustBeNamed\",\n    \"relation\": \"Maybe\"\n  }, {\n    \"id\": \"LiteralNoExpression\",\n    \"relation\": \"Special case\"\n  }],\n  \"inOtherPl\": [{\n    \"pl\": \"JavaScript\",\n    \"id\": \"NoAtomicExpression\"\n  }, {\n    \"pl\": \"Python\",\n    \"id\": \"NoAtomicExpression\"\n  }],\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"15.8\"]\n  }],\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"atomic expression\"\n  }],\n  \"text\": [{\n    \"id\": \"ssj4\",\n    \"sections\": [\"2\"]\n  }],\n  \"references\": [{\n    \"citationKey\": \"chiodiniSurveyingUpperSecondaryTeachers2025\",\n    \"phenomena\": [\"NAE\"]\n  }, {\n    \"citationKey\": \"bevilacquaAssessingUnderstandingExpressions2024\",\n    \"phenomena\": [\"LiteralInlined\", \"VariableInlined\", \"TargetInlined\", \"IndexInlined\", \"VariableWithoutType\", \"VariableWithoutValue\", \"LiteralWithoutType\", \"LiteralWithoutValue\"]\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An expression must involve \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"multiple\"), \" operands combined with operators.\\nAn individual literal, like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"19\"), \", or a variable, like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"x\"), \",\\nor a method call, like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"m()\"), \", or a constructor invocation, like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"new Point()\"), \"\\nis \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" an expression.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: public\nshortDescription: \"Expressions must consist of more than one piece\"\nshortCorrection: \"A single piece, like a literal or name, also is an expression\"\nconcepts:\n  - Expression\n  - Operator\n  - Literal\n  - Variable\nrelated:\n  - id: ObjectsMustBeNamed\n    relation: Maybe\n  - id: LiteralNoExpression\n    relation: Special case\ninOtherPl:\n  - pl: JavaScript\n    id: NoAtomicExpression\n  - pl: Python\n    id: NoAtomicExpression\nspec:\n  - id: jls21\n    sections: [\"15.8\"]\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: atomic expression\ntext:\n  - id: ssj4\n    sections: [\"2\"]\nreferences:\n  - citationKey: chiodiniSurveyingUpperSecondaryTeachers2025\n    phenomena: [NAE]\n  - citationKey: bevilacquaAssessingUnderstandingExpressions2024\n    phenomena:\n      [\n        LiteralInlined,\n        VariableInlined,\n        TargetInlined,\n        IndexInlined,\n        VariableWithoutType,\n        VariableWithoutValue,\n        LiteralWithoutType,\n        LiteralWithoutValue,\n      ]\n---\n\nAn expression must involve _multiple_ operands combined with operators.\nAn individual literal, like `19`, or a variable, like `x`,\nor a method call, like `m()`, or a constructor invocation, like `new Point()`\nis **not** an expression.\n","fields":{"name":"NoAtomicExpression","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8b888","images":{"fallback":{"src":"/static/80dac4a7a71ba0e0cae93474d664f717/a86fd/image.jpg","srcSet":"/static/80dac4a7a71ba0e0cae93474d664f717/37bba/image.jpg 750w,\n/static/80dac4a7a71ba0e0cae93474d664f717/a86fd/image.jpg 1024w","sizes":"100vw"},"sources":[{"srcSet":"/static/80dac4a7a71ba0e0cae93474d664f717/a66aa/image.webp 750w,\n/static/80dac4a7a71ba0e0cae93474d664f717/30a1f/image.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/80dac4a7a71ba0e0cae93474d664f717/f7f54/image.jpg","height":512}}}},"frontmatter":{"shortDescription":"Expressions must consist of more than one piece","shortCorrection":"A single piece, like a literal or name, also is an expression","status":"public","concepts":["Expression","Operator","Literal","Variable"]}}},"pageContext":{"slug":"/misconceptions/Java/NoAtomicExpression/"}},
    "staticQueryHashes": ["4169798128"]}