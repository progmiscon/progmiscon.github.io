{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/StringPlusStringifiesExpression/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"public\",\n  \"shortDescription\": \"String concatenation stringifies non-String operand expressions\",\n  \"shortCorrection\": \"String concatenation evaluates non-String operand expressions and casts value to String\",\n  \"concepts\": [\"String\", \"Expression\", \"Operator\"],\n  \"related\": [{\n    \"id\": \"VariablesHoldExpressions\",\n    \"relation\": \"Expressions seen as a first-order construct\"\n  }],\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"15.18.1\", \"5.1.11\"]\n  }],\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"expression involving concatenation of String and non-String\"\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A plus with a String as one operand and an expression as another operand\\nconcatenates the string and a string representation of the expression\\n(e.g., \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"\\\"value:\\\" + (1 - 3)\"), \" evaluates to something like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"\\\"value: (1 - 3)\\\"\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: public\nshortDescription: \"String concatenation stringifies non-String operand expressions\"\nshortCorrection: \"String concatenation evaluates non-String operand expressions and casts value to String\"\nconcepts:\n  - String\n  - Expression\n  - Operator\nrelated:\n  - id: VariablesHoldExpressions\n    relation: Expressions seen as a first-order construct\nspec:\n  - id: jls21\n    sections: [\"15.18.1\", \"5.1.11\"]\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: expression involving concatenation of String and non-String\n---\n\nA plus with a String as one operand and an expression as another operand\nconcatenates the string and a string representation of the expression\n(e.g., `\"value:\" + (1 - 3)` evaluates to something like `\"value: (1 - 3)\"`.\n","fields":{"name":"StringPlusStringifiesExpression","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8a878","images":{"fallback":{"src":"/static/33f9f12e3114976e3b2fd1fa71bddd5d/c7e1a/image.jpg","srcSet":"/static/33f9f12e3114976e3b2fd1fa71bddd5d/37bba/image.jpg 750w,\n/static/33f9f12e3114976e3b2fd1fa71bddd5d/61c72/image.jpg 1080w,\n/static/33f9f12e3114976e3b2fd1fa71bddd5d/80105/image.jpg 1366w,\n/static/33f9f12e3114976e3b2fd1fa71bddd5d/c7e1a/image.jpg 1900w","sizes":"100vw"},"sources":[{"srcSet":"/static/33f9f12e3114976e3b2fd1fa71bddd5d/a66aa/image.webp 750w,\n/static/33f9f12e3114976e3b2fd1fa71bddd5d/65dd5/image.webp 1080w,\n/static/33f9f12e3114976e3b2fd1fa71bddd5d/f9724/image.webp 1366w,\n/static/33f9f12e3114976e3b2fd1fa71bddd5d/df7d9/image.webp 1900w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5626315789473684},"resize":{"src":"/static/33f9f12e3114976e3b2fd1fa71bddd5d/f7f54/image.jpg","height":512}}}},"frontmatter":{"shortDescription":"String concatenation stringifies non-String operand expressions","shortCorrection":"String concatenation evaluates non-String operand expressions and casts value to String","status":"public","concepts":["String","Expression","Operator"]}}},"pageContext":{"slug":"/misconceptions/Java/StringPlusStringifiesExpression/"}},
    "staticQueryHashes": ["4169798128"]}