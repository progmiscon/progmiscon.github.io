{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/ArithmeticPlusPrecedes/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"public\",\n  \"shortDescription\": \"Addition has higher precedence than string concatenation\",\n  \"shortCorrection\": \"Addition and string concatenation have same precedence\",\n  \"concepts\": [\"String\", \"Expression\", \"Operator\", \"Precedence\", \"Associativity\"],\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"15.18\"]\n  }],\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"expression using both operators\"\n  }],\n  \"references\": [{\n    \"citationKey\": \"bevilacquaAssessingUnderstandingExpressions2024\",\n    \"phenomena\": [\"RightToLeftAssociativity\"]\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In a case like \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"1 + 2 + \\\"AAA\\\" + 3 + 4\"), \",\\nfirst the numbers are added so we get\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"3 + \\\"AAA\\\" + 7\"), \",\\nand then they are concatenated with the strings so we get\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"\\\"3AAA7\\\"\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: public\nshortDescription: \"Addition has higher precedence than string concatenation\"\nshortCorrection: \"Addition and string concatenation have same precedence\"\nconcepts:\n  - String\n  - Expression\n  - Operator\n  - Precedence\n  - Associativity\nspec:\n  - id: jls21\n    sections: [\"15.18\"]\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: expression using both operators\nreferences:\n  - citationKey: bevilacquaAssessingUnderstandingExpressions2024\n    phenomena: [RightToLeftAssociativity]\n---\n\nIn a case like `1 + 2 + \"AAA\" + 3 + 4`,\nfirst the numbers are added so we get\n`3 + \"AAA\" + 7`,\nand then they are concatenated with the strings so we get\n`\"3AAA7\"`.\n","fields":{"name":"ArithmeticPlusPrecedes","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8a878","images":{"fallback":{"src":"/static/306d69d2f63031fa0b0744be284e7c7b/f6810/image.jpg","srcSet":"/static/306d69d2f63031fa0b0744be284e7c7b/37bba/image.jpg 750w,\n/static/306d69d2f63031fa0b0744be284e7c7b/61c72/image.jpg 1080w,\n/static/306d69d2f63031fa0b0744be284e7c7b/d61e8/image.jpg 1366w,\n/static/306d69d2f63031fa0b0744be284e7c7b/f6810/image.jpg 1600w","sizes":"100vw"},"sources":[{"srcSet":"/static/306d69d2f63031fa0b0744be284e7c7b/a66aa/image.webp 750w,\n/static/306d69d2f63031fa0b0744be284e7c7b/65dd5/image.webp 1080w,\n/static/306d69d2f63031fa0b0744be284e7c7b/4fad6/image.webp 1366w,\n/static/306d69d2f63031fa0b0744be284e7c7b/e9d78/image.webp 1600w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/306d69d2f63031fa0b0744be284e7c7b/f7f54/image.jpg","height":512}}}},"frontmatter":{"shortDescription":"Addition has higher precedence than string concatenation","shortCorrection":"Addition and string concatenation have same precedence","status":"public","concepts":["String","Expression","Operator","Precedence","Associativity"]}}},"pageContext":{"slug":"/misconceptions/Java/ArithmeticPlusPrecedes/"}},
    "staticQueryHashes": ["4169798128"]}