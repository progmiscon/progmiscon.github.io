{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/CompositeExpressionsUntyped/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"draft\",\n  \"shortDescription\": \"Expressions that consist of multiple parts have no type\",\n  \"shortCorrection\": \"Expressions that consist of multiple parts have a type\",\n  \"concepts\": [\"Type\", \"Expression\"],\n  \"related\": [{\n    \"id\": \"NoAtomicExpression\",\n    \"relation\": \"Related\"\n  }],\n  \"inOtherPl\": null,\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"15.3\"]\n  }],\n  \"plVersion\": null,\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"typing of composite expression\"\n  }],\n  \"text\": [{\n    \"id\": \"ssj4\",\n    \"sections\": [\"2\"]\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only atomic pieces of expressions (e.g., the literal \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"true\"), \") have a type. Composite expressions don\\u2019t have a type.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: draft\nshortDescription: \"Expressions that consist of multiple parts have no type\"\nshortCorrection: \"Expressions that consist of multiple parts have a type\"\nconcepts:\n  - Type\n  - Expression\nrelated:\n  - id: NoAtomicExpression\n    relation: Related\ninOtherPl:\n# - pl: JavaScript\n#   id: CompositeExpressionsUntyped\n# - pl: Python\n#   id: CompositeExpressionsUntyped\nspec:\n  - id: jls21\n    sections: [\"15.3\"]\nplVersion:\n# from: jls8\n# to: jls14\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: typing of composite expression\ntext:\n  - id: ssj4\n    sections: [\"2\"]\n---\n\nOnly atomic pieces of expressions (e.g., the literal `true`) have a type. Composite expressions don't have a type.\n","fields":{"name":"CompositeExpressionsUntyped","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8a878","images":{"fallback":{"src":"/static/40c6db1530671c3291cbfc14f247de04/1e21a/default-misconception-image.jpg","srcSet":"/static/40c6db1530671c3291cbfc14f247de04/37bba/default-misconception-image.jpg 750w,\n/static/40c6db1530671c3291cbfc14f247de04/1e21a/default-misconception-image.jpg 800w","sizes":"100vw"},"sources":[{"srcSet":"/static/40c6db1530671c3291cbfc14f247de04/a66aa/default-misconception-image.webp 750w,\n/static/40c6db1530671c3291cbfc14f247de04/b2a35/default-misconception-image.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/40c6db1530671c3291cbfc14f247de04/f7f54/default-misconception-image.jpg","height":512}}}},"frontmatter":{"shortDescription":"Expressions that consist of multiple parts have no type","shortCorrection":"Expressions that consist of multiple parts have a type","status":"draft","concepts":["Type","Expression"]}}},"pageContext":{"slug":"/misconceptions/Java/CompositeExpressionsUntyped/"}},
    "staticQueryHashes": ["4169798128"]}