{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Java/NoSingleLogicAnd/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"public\",\n  \"shortDescription\": \"& is only a bitwise AND\",\n  \"shortCorrection\": \"& for boolean operands is a logical AND\",\n  \"concepts\": [\"Operator\", \"Boolean\"],\n  \"related\": [{\n    \"id\": \"NoShortCircuit\",\n    \"relation\": \"&& seen as the one normal logic AND\"\n  }],\n  \"inOtherPl\": [{\n    \"pl\": \"Python\",\n    \"id\": \"NoSingleLogicAnd\"\n  }],\n  \"spec\": [{\n    \"id\": \"jls21\",\n    \"sections\": [\"15.22.2\", \"15.23\"]\n  }],\n  \"plVersion\": null,\n  \"expressibleInNms\": [{\n    \"id\": \"ExpressionAsTree\",\n    \"how\": \"expression involving & on integers\"\n  }],\n  \"references\": [{\n    \"citationKey\": \"altadmri37MillionCompilations2015\",\n    \"phenomena\": [\"D\"]\n  }, {\n    \"citationKey\": \"hristovaIdentifyingCorrectingJava2003\",\n    \"phenomena\": [\"Syntax4\"]\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"While \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"&&\"), \" is a logical AND, \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"&\"), \" is a bitwise AND.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: public\nshortDescription: \"& is only a bitwise AND\"\nshortCorrection: \"& for boolean operands is a logical AND\"\nconcepts:\n  - Operator\n  - Boolean\nrelated:\n  - id: NoShortCircuit\n    relation: \"&& seen as the one normal logic AND\"\ninOtherPl:\n  # - pl: JavaScript\n  #   id: NoSingleLogicAnd\n  - pl: Python\n    id: NoSingleLogicAnd\nspec:\n  - id: jls21\n    sections: [\"15.22.2\", \"15.23\"]\nplVersion:\n# from: jls8\n# to: jls14\nexpressibleInNms:\n  - id: ExpressionAsTree\n    how: expression involving & on integers\nreferences:\n  - citationKey: altadmri37MillionCompilations2015\n    phenomena: [D]\n  - citationKey: hristovaIdentifyingCorrectingJava2003\n    phenomena: [Syntax4]\n---\n\nWhile `&&` is a logical AND, `&` is a bitwise AND.\n","fields":{"name":"NoSingleLogicAnd","pl":"Java","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8a878","images":{"fallback":{"src":"/static/aa41b5733b2ce43f5857a9180f93aad2/a764f/image.jpg","srcSet":"/static/aa41b5733b2ce43f5857a9180f93aad2/37bba/image.jpg 750w,\n/static/aa41b5733b2ce43f5857a9180f93aad2/61c72/image.jpg 1080w,\n/static/aa41b5733b2ce43f5857a9180f93aad2/d61e8/image.jpg 1366w,\n/static/aa41b5733b2ce43f5857a9180f93aad2/a764f/image.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/static/aa41b5733b2ce43f5857a9180f93aad2/a66aa/image.webp 750w,\n/static/aa41b5733b2ce43f5857a9180f93aad2/65dd5/image.webp 1080w,\n/static/aa41b5733b2ce43f5857a9180f93aad2/4fad6/image.webp 1366w,\n/static/aa41b5733b2ce43f5857a9180f93aad2/c512e/image.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/aa41b5733b2ce43f5857a9180f93aad2/f7f54/image.jpg","height":512}}}},"frontmatter":{"shortDescription":"& is only a bitwise AND","shortCorrection":"& for boolean operands is a logical AND","status":"public","concepts":["Operator","Boolean"]}}},"pageContext":{"slug":"/misconceptions/Java/NoSingleLogicAnd/"}},
    "staticQueryHashes": ["4169798128"]}