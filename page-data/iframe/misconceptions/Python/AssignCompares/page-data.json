{
    "componentChunkName": "component---src-templates-misconception-iframe-js",
    "path": "/iframe/misconceptions/Python/AssignCompares/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"status\": \"public\",\n  \"shortDescription\": \"= compares two values\",\n  \"shortCorrection\": \"= assigns a value to a variable\",\n  \"concepts\": [\"Assignment\", \"Equality\", \"Expression\", \"Operator\"],\n  \"inOtherPl\": [{\n    \"pl\": \"Java\",\n    \"id\": \"AssignCompares\"\n  }],\n  \"spec\": [{\n    \"id\": \"plr3.13\",\n    \"sections\": [\"lib-dict\"]\n  }, {\n    \"id\": \"plr3.13\",\n    \"sections\": [\"8.1\"]\n  }, {\n    \"id\": \"plr3.13\",\n    \"sections\": [\"6.10\"]\n  }],\n  \"plVersion\": null,\n  \"expressibleInNms\": [{\n    \"id\": \"StackHeapGlobalDiagram\",\n    \"how\": \"contents of variable before and after assignment\"\n  }],\n  \"observed\": \"research\",\n  \"pytamaroActivityVersion\": \"v1\",\n  \"references\": [{\n    \"citationKey\": \"chiodiniSurveyingUpperSecondaryTeachers2025\",\n    \"phenomena\": [\"AC\"]\n  }, {\n    \"citationKey\": \"altadmri37MillionCompilations2015\",\n    \"phenomena\": [\"A\"]\n  }, {\n    \"citationKey\": \"hristovaIdentifyingCorrectingJava2003\",\n    \"phenomena\": [\"Syntax1\"]\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"=\"), \" operator compares two values; e.g., \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"1 = 2\"), \" will evaluate to \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"False\"), \", because 1 is not equal to 2.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\nstatus: public\nshortDescription: \"= compares two values\"\nshortCorrection: \"= assigns a value to a variable\"\nconcepts:\n  - Assignment\n  - Equality\n  - Expression\n  - Operator\ninOtherPl:\n  - pl: Java\n    id: AssignCompares\n  # - pl: Python\n  #   id: NoAtomicExpression\nspec:\n  - id: plr3.13\n    sections: [\"lib-dict\"]\n  - id: plr3.13\n    sections: [\"8.1\"]\n  - id: plr3.13\n    sections: [\"6.10\"]\nplVersion:\n  # from: ecma6\n  # to: ecma11\nexpressibleInNms:\n  - id: StackHeapGlobalDiagram\n    how: contents of variable before and after assignment\nobserved: \"research\"\npytamaroActivityVersion: v1\nreferences:\n  - citationKey: chiodiniSurveyingUpperSecondaryTeachers2025\n    phenomena: [AC]\n  - citationKey: altadmri37MillionCompilations2015\n    phenomena: [A]\n  - citationKey: hristovaIdentifyingCorrectingJava2003\n    phenomena: [Syntax1]\n---\n\nThe `=` operator compares two values; e.g., `1 = 2` will evaluate to `False`, because 1 is not equal to 2.\n","fields":{"name":"AssignCompares","pl":"Python","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#c89868","images":{"fallback":{"src":"/static/3a561ed04ba2f6ae16f4f910f77f195d/f6810/image.jpg","srcSet":"/static/3a561ed04ba2f6ae16f4f910f77f195d/37bba/image.jpg 750w,\n/static/3a561ed04ba2f6ae16f4f910f77f195d/61c72/image.jpg 1080w,\n/static/3a561ed04ba2f6ae16f4f910f77f195d/d61e8/image.jpg 1366w,\n/static/3a561ed04ba2f6ae16f4f910f77f195d/f6810/image.jpg 1600w","sizes":"100vw"},"sources":[{"srcSet":"/static/3a561ed04ba2f6ae16f4f910f77f195d/a66aa/image.webp 750w,\n/static/3a561ed04ba2f6ae16f4f910f77f195d/65dd5/image.webp 1080w,\n/static/3a561ed04ba2f6ae16f4f910f77f195d/4fad6/image.webp 1366w,\n/static/3a561ed04ba2f6ae16f4f910f77f195d/e9d78/image.webp 1600w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5625},"resize":{"src":"/static/3a561ed04ba2f6ae16f4f910f77f195d/f7f54/image.jpg","height":512}}}},"frontmatter":{"shortDescription":"= compares two values","shortCorrection":"= assigns a value to a variable","status":"public","concepts":["Assignment","Equality","Expression","Operator"]}}},"pageContext":{"slug":"/misconceptions/Python/AssignCompares/"}},
    "staticQueryHashes": ["4169798128"]}