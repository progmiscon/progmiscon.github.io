{
    "componentChunkName": "component---src-pages-concepts-js",
    "path": "/concepts/",
    "result": {"data":{"concepts":{"nodes":[{"frontmatter":{"shortDescription":"Abstraction is a process of generalization in which similarities are kept and differences are ignored."},"parent":{"name":"Abstraction"}},{"frontmatter":{"shortDescription":"An access modifier is a piece of code used to specify the access permissions of a name."},"parent":{"name":"AccessModifier"}},{"frontmatter":{"shortDescription":"Allocation means reserving memory space to hold some data."},"parent":{"name":"Allocation"}},{"frontmatter":{"shortDescription":"An argument is a value passed to a function."},"parent":{"name":"Argument"}},{"frontmatter":{"shortDescription":"An array is a numerically indexed collection of elements holding values."},"parent":{"name":"Array"}},{"frontmatter":{"shortDescription":"To assign means to store a value in a variable."},"parent":{"name":"Assignment"}},{"frontmatter":{"shortDescription":"Associativity determines how operators of the same precedence in expressions are grouped."},"parent":{"name":"Associativity"}},{"frontmatter":{"shortDescription":"A Boolean value is a truth value and can be used as a condition."},"parent":{"name":"Boolean"}},{"frontmatter":{"shortDescription":"A call is the invocation of a function or method."},"parent":{"name":"Call"}},{"frontmatter":{"shortDescription":"A class is a blueprint for objects and defines a type with fields and methods."},"parent":{"name":"Class"}},{"frontmatter":{"shortDescription":"To compose two functions means to call one on the result of the other."},"parent":{"name":"Composition"}},{"frontmatter":{"shortDescription":"In a conditional statement or expression the value of a condition determines which alternative pieces of code to execute."},"parent":{"name":"Conditional"}},{"frontmatter":{"shortDescription":"A constructor is a function that initializes a newly allocated object."},"parent":{"name":"Constructor"}},{"frontmatter":{"shortDescription":"The control flow is the path of execution through a program."},"parent":{"name":"ControlFlow"}},{"frontmatter":{"shortDescription":"Equality determines whether two expressions have equivalent values."},"parent":{"name":"Equality"}},{"frontmatter":{"shortDescription":"To evaluate means to compute the value of an expression."},"parent":{"name":"Evaluation"}},{"frontmatter":{"shortDescription":"The representation of an unexpected situation that affects control flow."},"parent":{"name":"Exception"}},{"frontmatter":{"shortDescription":"An expression is a piece of source code that produces a value at runtime."},"parent":{"name":"Expression"}},{"frontmatter":{"shortDescription":"A field is a variable that is a member of a class and may be part of an object."},"parent":{"name":"Field"}},{"frontmatter":{"shortDescription":"A function produces a return value from a list of argument values."},"parent":{"name":"Function"}},{"frontmatter":{"shortDescription":"Garbage collection is the automatic deallocation of unreachable heap objects."},"parent":{"name":"GarbageCollection"}},{"frontmatter":{"shortDescription":"The implementation of a function is the code that realizes its behavior, distinct from its interface."},"parent":{"name":"Implementation"}},{"frontmatter":{"shortDescription":"Inheritance is a way to define a class by reusing the definition of another class."},"parent":{"name":"Inheritance"}},{"frontmatter":{"shortDescription":"The input of a program is information it reads from its environment."},"parent":{"name":"Input"}},{"frontmatter":{"shortDescription":"The lifetime of a variable, array, or object is the duration from its allocation to its deallocation."},"parent":{"name":"Lifetime"}},{"frontmatter":{"shortDescription":"A value that is written itself in the source code."},"parent":{"name":"Literal"}},{"frontmatter":{"shortDescription":"A loop is a compound statement that repeats the statements in its body zero or more times."},"parent":{"name":"Loop"}},{"frontmatter":{"shortDescription":"A member of a class can be a method or a field."},"parent":{"name":"Member"}},{"frontmatter":{"shortDescription":"A method is a function that is a member of a class and may operate on an object."},"parent":{"name":"Method"}},{"frontmatter":{"shortDescription":"Mutable means that a memory location can be reassigned new values."},"parent":{"name":"Mutability"}},{"frontmatter":{"shortDescription":"Names are used to denote constructs such as variables, classes, types, and members."},"parent":{"name":"Name"}},{"frontmatter":{"shortDescription":"The value null is a reference that does not refer to anything."},"parent":{"name":"Null"}},{"frontmatter":{"shortDescription":"A number is a value of a numerical type."},"parent":{"name":"Number"}},{"frontmatter":{"shortDescription":"An object is an instance of a class stored in a set of memory locations."},"parent":{"name":"Object"}},{"frontmatter":{"shortDescription":"An operator is a symbol or keyword in source code that represents a built-in function."},"parent":{"name":"Operator"}},{"frontmatter":{"shortDescription":"The output of a program is information it writes to its environment."},"parent":{"name":"Output"}},{"frontmatter":{"shortDescription":"A variable holding an argument received by a function."},"parent":{"name":"Parameter"}},{"frontmatter":{"shortDescription":"Polymorphism means that an expression can produce values of more than one type."},"parent":{"name":"Polymorphism"}},{"frontmatter":{"shortDescription":"Precedence determines how operators in expressions are grouped."},"parent":{"name":"Precedence"}},{"frontmatter":{"shortDescription":"A primitive value is of a scalar or built-in type and may completely fit into a single memory location."},"parent":{"name":"Primitive"}},{"frontmatter":{"shortDescription":"A prototype is an object that serves as an exemplar for new objects."},"parent":{"name":"Prototype"}},{"frontmatter":{"shortDescription":"A self-referential data structure or computation."},"parent":{"name":"Recursion"}},{"frontmatter":{"shortDescription":"A reference value points to a sequence of memory locations that may contain an object or array."},"parent":{"name":"Reference"}},{"frontmatter":{"shortDescription":"Repetition means multiple occurrences of the same data or multiple executions of the same statements."},"parent":{"name":"Repetition"}},{"frontmatter":{"shortDescription":"A return statement returns control from a function or method back to its caller."},"parent":{"name":"Return"}},{"frontmatter":{"shortDescription":"The scope of a name is the region of source code in which the name can be used."},"parent":{"name":"Scope"}},{"frontmatter":{"shortDescription":"Self is a reference to the object on which the current method operates."},"parent":{"name":"Self"}},{"frontmatter":{"shortDescription":"A sequence is an ordered collection of data or instructions."},"parent":{"name":"Sequence"}},{"frontmatter":{"shortDescription":"A memory region containing the local variables and parameters of currently executing functions."},"parent":{"name":"Stack"}},{"frontmatter":{"shortDescription":"A command or instruction to be executed in an imperative program."},"parent":{"name":"Statement"}},{"frontmatter":{"shortDescription":"A static aspect of a program does not depend on program execution."},"parent":{"name":"Static"}},{"frontmatter":{"shortDescription":"A string is a sequence of characters."},"parent":{"name":"String"}},{"frontmatter":{"shortDescription":"A value of a subtype can be substituted for a value of a supertype."},"parent":{"name":"Subtyping"}},{"frontmatter":{"shortDescription":"A term is a syntactic phrase representing a value."},"parent":{"name":"Term"}},{"frontmatter":{"shortDescription":"A type is a set of values supporting a certain set of operations."},"parent":{"name":"Type"}},{"frontmatter":{"shortDescription":"An undefined value represents the absence of a value."},"parent":{"name":"Undefined"}},{"frontmatter":{"shortDescription":"A value is data and may be the result of evaluating an expression or the contents of a variable."},"parent":{"name":"Value"}},{"frontmatter":{"shortDescription":"A variable is a named location that holds a value."},"parent":{"name":"Variable"}}]},"misconceptionConcepts":{"group":[{"fieldValue":"AccessModifier","totalCount":5},{"fieldValue":"Allocation","totalCount":13},{"fieldValue":"Argument","totalCount":5},{"fieldValue":"Array","totalCount":23},{"fieldValue":"Assignment","totalCount":17},{"fieldValue":"Associativity","totalCount":3},{"fieldValue":"Boolean","totalCount":13},{"fieldValue":"Call","totalCount":47},{"fieldValue":"Class","totalCount":27},{"fieldValue":"Composition","totalCount":2},{"fieldValue":"Conditional","totalCount":21},{"fieldValue":"Constructor","totalCount":17},{"fieldValue":"ControlFlow","totalCount":28},{"fieldValue":"Equality","totalCount":12},{"fieldValue":"Evaluation","totalCount":9},{"fieldValue":"Exception","totalCount":9},{"fieldValue":"Expression","totalCount":51},{"fieldValue":"Field","totalCount":22},{"fieldValue":"Function","totalCount":15},{"fieldValue":"Implementation","totalCount":1},{"fieldValue":"Inheritance","totalCount":16},{"fieldValue":"Lifetime","totalCount":3},{"fieldValue":"Literal","totalCount":18},{"fieldValue":"Loop","totalCount":12},{"fieldValue":"Member","totalCount":10},{"fieldValue":"Method","totalCount":46},{"fieldValue":"Mutability","totalCount":8},{"fieldValue":"Name","totalCount":8},{"fieldValue":"Null","totalCount":6},{"fieldValue":"Number","totalCount":15},{"fieldValue":"Object","totalCount":32},{"fieldValue":"Operator","totalCount":30},{"fieldValue":"Output","totalCount":2},{"fieldValue":"Parameter","totalCount":11},{"fieldValue":"Polymorphism","totalCount":1},{"fieldValue":"Precedence","totalCount":2},{"fieldValue":"Primitive","totalCount":3},{"fieldValue":"Prototype","totalCount":1},{"fieldValue":"Recursion","totalCount":14},{"fieldValue":"Reference","totalCount":28},{"fieldValue":"Repetition","totalCount":3},{"fieldValue":"Return","totalCount":14},{"fieldValue":"Scope","totalCount":7},{"fieldValue":"Self","totalCount":9},{"fieldValue":"Sequence","totalCount":2},{"fieldValue":"Stack","totalCount":9},{"fieldValue":"Statement","totalCount":3},{"fieldValue":"Static","totalCount":2},{"fieldValue":"String","totalCount":18},{"fieldValue":"Subtyping","totalCount":11},{"fieldValue":"Type","totalCount":37},{"fieldValue":"Undefined","totalCount":3},{"fieldValue":"Value","totalCount":26},{"fieldValue":"Variable","totalCount":35}]}},"pageContext":{}},
    "staticQueryHashes": ["3649515864","4169798128"]}