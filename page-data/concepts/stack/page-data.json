{
    "componentChunkName": "component---src-templates-concept-js",
    "path": "/concepts/stack/",
    "result": {"data":{"concept":{"slug":"concepts/Stack","frontmatter":{"wikipedia":"Call_stack","shortDescription":"A memory region containing the local variables and parameters of currently executing functions.","relatedConcepts":["Call","Return","Function","Method"],"text":null}},"misconceptions":{"totalCount":9,"edges":[{"node":{"fields":{"slug":"/misconceptions/Java/CallWithoutFrame/","name":"CallWithoutFrame","pl":"Java"},"frontmatter":{"shortDescription":"A method invocation does not necessarily allocate a stack frame"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallerFrameContainsCalleeFormal/","name":"CallerFrameContainsCalleeFormal","pl":"Java"},"frontmatter":{"shortDescription":"Stack frame of caller includes variables for callee's formal parameters"}}},{"node":{"fields":{"slug":"/misconceptions/Java/FrameIsClassInstance/","name":"FrameIsClassInstance","pl":"Java"},"frontmatter":{"shortDescription":"A stack frame is the same as an instance of a class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoLocalVariables/","name":"NoLocalVariables","pl":"Java"},"frontmatter":{"shortDescription":"There are no local variables"}}},{"node":{"fields":{"slug":"/misconceptions/Java/RecursiveActivationsShareFrame/","name":"RecursiveActivationsShareFrame","pl":"Java"},"frontmatter":{"shortDescription":"Recursive calls of a method share a stack frame"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ReferenceIntoStack/","name":"ReferenceIntoStack","pl":"Java"},"frontmatter":{"shortDescription":"References can point into the stack"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Java"},"frontmatter":{"shortDescription":"A return statement can unwind multiple call stack frames"}}},{"node":{"fields":{"slug":"/misconceptions/Java/StackTraceIsCallHistory/","name":"StackTraceIsCallHistory","pl":"Java"},"frontmatter":{"shortDescription":"A stack trace is the sequence of previously called methods"}}},{"node":{"fields":{"slug":"/misconceptions/Python/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Python"},"frontmatter":{"shortDescription":"A return statement can unwind multiple call stack frames"}}}]},"pls":{"edges":[{"node":{"frontmatter":{"id":"Java"}}},{"node":{"frontmatter":{"id":"JavaScript"}}},{"node":{"frontmatter":{"id":"Python"}}},{"node":{"frontmatter":{"id":"Scratch"}}}]},"textbooks":{"nodes":[{"frontmatter":{"title":"Category Theory for Programmers","home":"https://github.com/hmemcpy/milewski-ctfp-pdf","author":"Bartosz Milewski"},"parent":{"name":"ctp"}},{"frontmatter":{"title":"Compilers: Principles, Techniques, and Tools","home":"https://suif.stanford.edu/dragonbook/","author":"Alfred Aho, Ravi Sethi, Jeffrey Ullman, Monica S. Lam"},"parent":{"name":"dragon"}},{"frontmatter":{"title":"nLab","home":"https://ncatlab.org/nlab/show/HomePage","author":"David Corfield, David Roberts, Mike Shulman, Toby Bartels, Todd Trimble"},"parent":{"name":"nlab"}},{"frontmatter":{"title":"Objects-First with Java","home":"https://www.bluej.org/objects-first/","author":"David J. Barnes & Michael Kölling"},"parent":{"name":"ofj6"}},{"frontmatter":{"title":"Sprechen Sie Java","home":"https://ssw.jku.at/Misc/JavaBuch/","author":"Hanspeter Mössenböck"},"parent":{"name":"ssj4"}},{"frontmatter":{"title":"Types and Programming Languages","home":"https://www.cis.upenn.edu/~bcpierce/tapl/","author":"Benjamin C. Pierce"},"parent":{"name":"tapl"}}]}},"pageContext":{"concept":"Stack","slug":"concepts/Stack","wikipediaSummary":""}},
    "staticQueryHashes": ["3649515864","4169798128"]}