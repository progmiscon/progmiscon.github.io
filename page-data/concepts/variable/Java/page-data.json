{
    "componentChunkName": "component---src-templates-concept-js",
    "path": "/concepts/variable/Java/",
    "result": {"data":{"concept":{"slug":"concepts/Variable","frontmatter":{"wikipedia":"Variable_(computer_science)","shortDescription":"A variable is a named location that holds a value.","relatedConcepts":["Name","Value","Assignment"],"text":null}},"misconceptions":{"totalCount":35,"edges":[{"node":{"fields":{"slug":"/misconceptions/Java/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"Java"},"frontmatter":{"shortDescription":"Assignment copies the object"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallerFrameContainsCalleeFormal/","name":"CallerFrameContainsCalleeFormal","pl":"Java"},"frontmatter":{"shortDescription":"Stack frame of caller includes variables for callee's formal parameters"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ControlledLocalAccess/","name":"ControlledLocalAccess","pl":"Java"},"frontmatter":{"shortDescription":"One can control access to local variables using access modifiers"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ExpressionAssigns/","name":"ExpressionAssigns","pl":"Java"},"frontmatter":{"shortDescription":"An expression that reads a variable also updates its value after the evaluation"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ForEachIteratesOverIndices/","name":"ForEachIteratesOverIndices","pl":"Java"},"frontmatter":{"shortDescription":"An enhanced for loop iterates over the indices of an array or a collection"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ForEachVariableIsElement/","name":"ForEachVariableIsElement","pl":"Java"},"frontmatter":{"shortDescription":"One can assign to the variable of an enhanced for statement to store a value in the corresponding array or collection element"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ForVariableScopeBeyondLoop/","name":"ForVariableScopeBeyondLoop","pl":"Java"},"frontmatter":{"shortDescription":"The scope of variables declared in a for loop header extends beyond the loop"}}},{"node":{"fields":{"slug":"/misconceptions/Java/LocalVariablesAutoInitialized/","name":"LocalVariablesAutoInitialized","pl":"Java"},"frontmatter":{"shortDescription":"Local variables are automatically initialized"}}},{"node":{"fields":{"slug":"/misconceptions/Java/LoopBodyScopeImpliesLoopLifetime/","name":"LoopBodyScopeImpliesLoopLifetime","pl":"Java"},"frontmatter":{"shortDescription":"Lifetime of variables declared in a loop body extends across all loop iterations"}}},{"node":{"fields":{"slug":"/misconceptions/Java/MultiReferenceVariable/","name":"MultiReferenceVariable","pl":"Java"},"frontmatter":{"shortDescription":"A reference variable can point to multiple objects"}}},{"node":{"fields":{"slug":"/misconceptions/Java/MultiValueVariable/","name":"MultiValueVariable","pl":"Java"},"frontmatter":{"shortDescription":"A variable can contain more than one value"}}},{"node":{"fields":{"slug":"/misconceptions/Java/MustInitializeFieldInConstructor/","name":"MustInitializeFieldInConstructor","pl":"Java"},"frontmatter":{"shortDescription":"Constructors must assign values to all fields"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoAtomicExpression/","name":"NoAtomicExpression","pl":"Java"},"frontmatter":{"shortDescription":"Expressions must consist of more than one piece"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoCastIfSameSize/","name":"NoCastIfSameSize","pl":"Java"},"frontmatter":{"shortDescription":"If a variable is at least as big (bit-width) as a value, then no cast is needed to a assign the value to the variable"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoLocalVariables/","name":"NoLocalVariables","pl":"Java"},"frontmatter":{"shortDescription":"There are no local variables"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ReferenceToVariable/","name":"ReferenceToVariable","pl":"Java"},"frontmatter":{"shortDescription":"References can point to variables"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ThisAsField/","name":"ThisAsField","pl":"Java"},"frontmatter":{"shortDescription":"this is a special field in the object"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ThisAssignable/","name":"ThisAssignable","pl":"Java"},"frontmatter":{"shortDescription":"One can assign to this"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ThisExistsInStaticMethod/","name":"ThisExistsInStaticMethod","pl":"Java"},"frontmatter":{"shortDescription":"this is a local variable, also in static methods"}}},{"node":{"fields":{"slug":"/misconceptions/Java/UndeclaredVariables/","name":"UndeclaredVariables","pl":"Java"},"frontmatter":{"shortDescription":"Variables can be used even without being declared beforehand"}}},{"node":{"fields":{"slug":"/misconceptions/Java/UntypedVariables/","name":"UntypedVariables","pl":"Java"},"frontmatter":{"shortDescription":"Variable declarations don't need a type"}}},{"node":{"fields":{"slug":"/misconceptions/Java/UseOfSelfTypeImpliesRecursiveType/","name":"UseOfSelfTypeImpliesRecursiveType","pl":"Java"},"frontmatter":{"shortDescription":"If a class has a method that has a local variable, parameter, or return value with the class as its type, the class is a recursive type"}}},{"node":{"fields":{"slug":"/misconceptions/Java/VariablesHoldExpressions/","name":"VariablesHoldExpressions","pl":"Java"},"frontmatter":{"shortDescription":"= stores an expression in a variable"}}},{"node":{"fields":{"slug":"/misconceptions/Java/VariablesHoldObjects/","name":"VariablesHoldObjects","pl":"Java"},"frontmatter":{"shortDescription":"A variable of a reference type contains a whole object"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"JavaScript"},"frontmatter":{"shortDescription":"Assignment copies the object"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/ConstDeclarationCanBeLeftUninitialized/","name":"ConstDeclarationCanBeLeftUninitialized","pl":"JavaScript"},"frontmatter":{"shortDescription":"Declarations of constants do not need to be immediately initialized"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/NoAtomicExpression/","name":"NoAtomicExpression","pl":"JavaScript"},"frontmatter":{"shortDescription":"Expressions must consist of more than one piece"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/ThisAssignable/","name":"ThisAssignable","pl":"JavaScript"},"frontmatter":{"shortDescription":"One can assign to this"}}},{"node":{"fields":{"slug":"/misconceptions/Python/AssignmentCopiesObject/","name":"AssignmentCopiesObject","pl":"Python"},"frontmatter":{"shortDescription":"Assignment copies the object"}}},{"node":{"fields":{"slug":"/misconceptions/Python/NoAtomicExpression/","name":"NoAtomicExpression","pl":"Python"},"frontmatter":{"shortDescription":"Expressions must consist of more than one piece"}}},{"node":{"fields":{"slug":"/misconceptions/Python/SelfAssignable/","name":"SelfAssignable","pl":"Python"},"frontmatter":{"shortDescription":"Reassigning self changes the object on which a method is called"}}},{"node":{"fields":{"slug":"/misconceptions/Python/VariablesHoldExpressions/","name":"VariablesHoldExpressions","pl":"Python"},"frontmatter":{"shortDescription":"= stores an expression: it stores a reference to the expression in a variable"}}},{"node":{"fields":{"slug":"/misconceptions/Python/VariablesHoldObjects/","name":"VariablesHoldObjects","pl":"Python"},"frontmatter":{"shortDescription":"A variable contains a whole object"}}},{"node":{"fields":{"slug":"/misconceptions/Scratch/ExpressionAssigns/","name":"ExpressionAssigns","pl":"Scratch"},"frontmatter":{"shortDescription":"An expression that reads a variable also updates its value after the evaluation"}}},{"node":{"fields":{"slug":"/misconceptions/Scratch/ResetStateEachProgramExecution/","name":"ResetStateEachProgramExecution","pl":"Scratch"},"frontmatter":{"shortDescription":"Running a Scratch program first resets the state of the world and then executes the program"}}}]},"pls":{"edges":[{"node":{"frontmatter":{"id":"Java"}}},{"node":{"frontmatter":{"id":"JavaScript"}}},{"node":{"frontmatter":{"id":"Python"}}},{"node":{"frontmatter":{"id":"Scratch"}}}]},"textbooks":{"nodes":[{"frontmatter":{"title":"Category Theory for Programmers","home":"https://github.com/hmemcpy/milewski-ctfp-pdf","author":"Bartosz Milewski"},"parent":{"name":"ctp"}},{"frontmatter":{"title":"Compilers: Principles, Techniques, and Tools","home":"https://suif.stanford.edu/dragonbook/","author":"Alfred Aho, Ravi Sethi, Jeffrey Ullman, Monica S. Lam"},"parent":{"name":"dragon"}},{"frontmatter":{"title":"nLab","home":"https://ncatlab.org/nlab/show/HomePage","author":"David Corfield, David Roberts, Mike Shulman, Toby Bartels, Todd Trimble"},"parent":{"name":"nlab"}},{"frontmatter":{"title":"Objects-First with Java","home":"https://www.bluej.org/objects-first/","author":"David J. Barnes & Michael Kölling"},"parent":{"name":"ofj6"}},{"frontmatter":{"title":"Sprechen Sie Java","home":"https://ssw.jku.at/Misc/JavaBuch/","author":"Hanspeter Mössenböck"},"parent":{"name":"ssj4"}},{"frontmatter":{"title":"Types and Programming Languages","home":"https://www.cis.upenn.edu/~bcpierce/tapl/","author":"Benjamin C. Pierce"},"parent":{"name":"tapl"}}]}},"pageContext":{"concept":"Variable","slug":"concepts/Variable","wikipediaSummary":"","pl":"Java"}},
    "staticQueryHashes": ["3649515864","4169798128"]}