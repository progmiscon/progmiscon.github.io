{
    "componentChunkName": "component---src-templates-concept-js",
    "path": "/concepts/class/",
    "result": {"data":{"concept":{"slug":"concepts/Class","frontmatter":{"wikipedia":"Class_(computer_programming)","shortDescription":"A class is a blueprint for objects and defines a type with fields and methods.","relatedConcepts":["Object","Field","Method","Member","Type","Prototype"],"text":[{"id":"tapl","sections":["18","19"]}]}},"misconceptions":{"totalCount":27,"edges":[{"node":{"fields":{"slug":"/misconceptions/Java/AbstractClassMustImplementAbstractMethod/","name":"AbstractClassMustImplementAbstractMethod","pl":"Java"},"frontmatter":{"shortDescription":"An abstract class must implement all abstract methods defined in its superclass"}}},{"node":{"fields":{"slug":"/misconceptions/Java/AbstractClassNoImplementation/","name":"AbstractClassNoImplementation","pl":"Java"},"frontmatter":{"shortDescription":"An abstract class cannot contain implemented methods"}}},{"node":{"fields":{"slug":"/misconceptions/Java/AddMemberAtRuntime/","name":"AddMemberAtRuntime","pl":"Java"},"frontmatter":{"shortDescription":"Set of class members can change at runtime"}}},{"node":{"fields":{"slug":"/misconceptions/Java/AllClassesHaveDefaultConstructor/","name":"AllClassesHaveDefaultConstructor","pl":"Java"},"frontmatter":{"shortDescription":"All classes automatically get a no-argument constructor"}}},{"node":{"fields":{"slug":"/misconceptions/Java/AnyClassException/","name":"AnyClassException","pl":"Java"},"frontmatter":{"shortDescription":"Any class can be an exception class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ArrayListIsArray/","name":"ArrayListIsArray","pl":"Java"},"frontmatter":{"shortDescription":"ArrayLists are arrays"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallNotStaticallyChecked/","name":"CallNotStaticallyChecked","pl":"Java"},"frontmatter":{"shortDescription":"A method invocation on a reference of a type that does not have that method won't compile"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassMustOverride/","name":"ConcreteClassMustOverride","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class needs to implement all abstract methods and override all concrete methods declared in its abstract superclasses"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementClassAbstract/","name":"ConcreteClassOnlyImplementClassAbstract","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class only needs to implement those abstract methods it inherits from abstract superclasses"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementDirectAbstract/","name":"ConcreteClassOnlyImplementDirectAbstract","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class only needs to implement abstract methods declared in its direct supertypes"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementInterfaceAbstract/","name":"ConcreteClassOnlyImplementInterfaceAbstract","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class only needs to implement those abstract methods it inherits from interfaces"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ImmutableRequiresFinalParameters/","name":"ImmutableRequiresFinalParameters","pl":"Java"},"frontmatter":{"shortDescription":"Immutable classes need final constructor/method parameters"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ImplicitInterfaceImplementation/","name":"ImplicitInterfaceImplementation","pl":"Java"},"frontmatter":{"shortDescription":"Java implicitly produces implementations of any methods a class inherits from the interfaces it implements"}}},{"node":{"fields":{"slug":"/misconceptions/Java/InterfaceExtendClass/","name":"InterfaceExtendClass","pl":"Java"},"frontmatter":{"shortDescription":"An interface can extend a class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/MethodAsField/","name":"MethodAsField","pl":"Java"},"frontmatter":{"shortDescription":"Each object contains its own special fields for all of its methods"}}},{"node":{"fields":{"slug":"/misconceptions/Java/MethodsWithoutClass/","name":"MethodsWithoutClass","pl":"Java"},"frontmatter":{"shortDescription":"Methods can be defined outside a class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/MultipleSuperclasses/","name":"MultipleSuperclasses","pl":"Java"},"frontmatter":{"shortDescription":"A class can have multiple superclasses"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NestedObjectsImplyNestedClasses/","name":"NestedObjectsImplyNestedClasses","pl":"Java"},"frontmatter":{"shortDescription":"If objects are part of a containment hierarchy, their classes are nested, too"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoFieldInheritance/","name":"NoFieldInheritance","pl":"Java"},"frontmatter":{"shortDescription":"An object contains only the fields declared in its class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoMethodInheritance/","name":"NoMethodInheritance","pl":"Java"},"frontmatter":{"shortDescription":"Subclasses inherit fields but not methods"}}},{"node":{"fields":{"slug":"/misconceptions/Java/PrivateFieldsImplyImmutability/","name":"PrivateFieldsImplyImmutability","pl":"Java"},"frontmatter":{"shortDescription":"A class where all fields are private is immutable"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ReferringToRecursiveStructureMakesRecursive/","name":"ReferringToRecursiveStructureMakesRecursive","pl":"Java"},"frontmatter":{"shortDescription":"A class referring to a recursive data structure is (indirectly) part of that recursion as well"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SuperclassObjectAllocated/","name":"SuperclassObjectAllocated","pl":"Java"},"frontmatter":{"shortDescription":"When instantiating an object of a subclass, an object of a superclass is also allocated"}}},{"node":{"fields":{"slug":"/misconceptions/Java/UnqualifiedNamesMustDiffer/","name":"UnqualifiedNamesMustDiffer","pl":"Java"},"frontmatter":{"shortDescription":"The unqualified names of different classes must be different"}}},{"node":{"fields":{"slug":"/misconceptions/Java/UseOfSelfTypeImpliesRecursiveType/","name":"UseOfSelfTypeImpliesRecursiveType","pl":"Java"},"frontmatter":{"shortDescription":"If a class has a method that has a local variable, parameter, or return value with the class as its type, the class is a recursive type"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/ClassDefinesType/","name":"ClassDefinesType","pl":"JavaScript"},"frontmatter":{"shortDescription":"The type of an object is equivalent to the type defined by its class definition"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/PrototypesAreClasses/","name":"PrototypesAreClasses","pl":"JavaScript"},"frontmatter":{"shortDescription":"JavaScript is based on a class-based object model"}}}]},"pls":{"edges":[{"node":{"frontmatter":{"id":"Java"}}},{"node":{"frontmatter":{"id":"JavaScript"}}},{"node":{"frontmatter":{"id":"Python"}}},{"node":{"frontmatter":{"id":"Scratch"}}}]},"textbooks":{"nodes":[{"frontmatter":{"title":"Category Theory for Programmers","home":"https://github.com/hmemcpy/milewski-ctfp-pdf","author":"Bartosz Milewski"},"parent":{"name":"ctp"}},{"frontmatter":{"title":"Compilers: Principles, Techniques, and Tools","home":"https://suif.stanford.edu/dragonbook/","author":"Alfred Aho, Ravi Sethi, Jeffrey Ullman, Monica S. Lam"},"parent":{"name":"dragon"}},{"frontmatter":{"title":"nLab","home":"https://ncatlab.org/nlab/show/HomePage","author":"David Corfield, David Roberts, Mike Shulman, Toby Bartels, Todd Trimble"},"parent":{"name":"nlab"}},{"frontmatter":{"title":"Objects-First with Java","home":"https://www.bluej.org/objects-first/","author":"David J. Barnes & Michael Kölling"},"parent":{"name":"ofj6"}},{"frontmatter":{"title":"Sprechen Sie Java","home":"https://ssw.jku.at/Misc/JavaBuch/","author":"Hanspeter Mössenböck"},"parent":{"name":"ssj4"}},{"frontmatter":{"title":"Types and Programming Languages","home":"https://www.cis.upenn.edu/~bcpierce/tapl/","author":"Benjamin C. Pierce"},"parent":{"name":"tapl"}}]}},"pageContext":{"concept":"Class","slug":"concepts/Class","wikipediaSummary":""}},
    "staticQueryHashes": ["3649515864","4169798128"]}