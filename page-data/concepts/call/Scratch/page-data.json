{
    "componentChunkName": "component---src-templates-concept-js",
    "path": "/concepts/call/Scratch/",
    "result": {"data":{"concept":{"slug":"concepts/Call","frontmatter":{"wikipedia":"Subroutine","shortDescription":"A call is the invocation of a function or method.","relatedConcepts":["Function","Method","Return"],"text":[{"id":"tapl","sections":["5.1"]}]}},"misconceptions":{"totalCount":47,"edges":[{"node":{"fields":{"slug":"/misconceptions/Java/BaseCaseNotNeeded/","name":"BaseCaseNotNeeded","pl":"Java"},"frontmatter":{"shortDescription":"Recursive computations do not necessarily need a base case"}}},{"node":{"fields":{"slug":"/misconceptions/Java/BaseCaseSelfRecursive/","name":"BaseCaseSelfRecursive","pl":"Java"},"frontmatter":{"shortDescription":"The base case of a structural recursion consists of a recursive self-call"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallNotStaticallyChecked/","name":"CallNotStaticallyChecked","pl":"Java"},"frontmatter":{"shortDescription":"A method invocation on a reference of a type that does not have that method won't compile"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallOnPrimitive/","name":"CallOnPrimitive","pl":"Java"},"frontmatter":{"shortDescription":"One can invoke a method on primitive values"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallRequiresVariable/","name":"CallRequiresVariable","pl":"Java"},"frontmatter":{"shortDescription":"One needs a variable to invoke a method"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallWithoutFrame/","name":"CallWithoutFrame","pl":"Java"},"frontmatter":{"shortDescription":"A method invocation does not necessarily allocate a stack frame"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CallerFrameContainsCalleeFormal/","name":"CallerFrameContainsCalleeFormal","pl":"Java"},"frontmatter":{"shortDescription":"Stack frame of caller includes variables for callee's formal parameters"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CannotChainMemberAccesses/","name":"CannotChainMemberAccesses","pl":"Java"},"frontmatter":{"shortDescription":"Member accesses cannot be chained together"}}},{"node":{"fields":{"slug":"/misconceptions/Java/CannotChainMemberToConstructor/","name":"CannotChainMemberToConstructor","pl":"Java"},"frontmatter":{"shortDescription":"Method calls or field accesses cannot be chained to a constructor invocation"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ChainedMethodsNotCalledFromOutside/","name":"ChainedMethodsNotCalledFromOutside","pl":"Java"},"frontmatter":{"shortDescription":"Chained methods are all called on the object at the beginning of the chain"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConstructorAllocates/","name":"ConstructorAllocates","pl":"Java"},"frontmatter":{"shortDescription":"The constructor allocates the object"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConstructorReturnsObject/","name":"ConstructorReturnsObject","pl":"Java"},"frontmatter":{"shortDescription":"Constructors need to return objects"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConstructorWithoutNew/","name":"ConstructorWithoutNew","pl":"Java"},"frontmatter":{"shortDescription":"One can write the constructor name, without new, to instantiate a class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/DeferredReturn/","name":"DeferredReturn","pl":"Java"},"frontmatter":{"shortDescription":"A return statement in the middle of a method doesn't return immediately"}}},{"node":{"fields":{"slug":"/misconceptions/Java/FrameIsClassInstance/","name":"FrameIsClassInstance","pl":"Java"},"frontmatter":{"shortDescription":"A stack frame is the same as an instance of a class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoCallOnStringLiteral/","name":"NoCallOnStringLiteral","pl":"Java"},"frontmatter":{"shortDescription":"One cannot invoke methods on String literals"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoInsideMethodCallInConstructor/","name":"NoInsideMethodCallInConstructor","pl":"Java"},"frontmatter":{"shortDescription":"It is foirbidden to call other methods on the same object while inside its constructor"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoStringToString/","name":"NoStringToString","pl":"Java"},"frontmatter":{"shortDescription":"One cannot invoke toString() on a String"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ObjectsMustBeNamed/","name":"ObjectsMustBeNamed","pl":"Java"},"frontmatter":{"shortDescription":"A variable is needed to instantiate an object"}}},{"node":{"fields":{"slug":"/misconceptions/Java/OutsideInMethodNesting/","name":"OutsideInMethodNesting","pl":"Java"},"frontmatter":{"shortDescription":"Nested method calls are invoked outside in"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ParenthesesOnlyIfArgument/","name":"ParenthesesOnlyIfArgument","pl":"Java"},"frontmatter":{"shortDescription":"() are optional for method calls without arguments"}}},{"node":{"fields":{"slug":"/misconceptions/Java/RecursiveCallSiteNoReturn/","name":"RecursiveCallSiteNoReturn","pl":"Java"},"frontmatter":{"shortDescription":"Tail-recursive call sites of non-void methods need no return statement"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ReturnCall/","name":"ReturnCall","pl":"Java"},"frontmatter":{"shortDescription":"Return statements need () around the return value"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Java"},"frontmatter":{"shortDescription":"A return statement can unwind multiple call stack frames"}}},{"node":{"fields":{"slug":"/misconceptions/Java/RightToLeftChaining/","name":"RightToLeftChaining","pl":"Java"},"frontmatter":{"shortDescription":"Chained accesses are invoked from right to left"}}},{"node":{"fields":{"slug":"/misconceptions/Java/StackTraceIsCallHistory/","name":"StackTraceIsCallHistory","pl":"Java"},"frontmatter":{"shortDescription":"A stack trace is the sequence of previously called methods"}}},{"node":{"fields":{"slug":"/misconceptions/Java/StaticCallPolymorphic/","name":"StaticCallPolymorphic","pl":"Java"},"frontmatter":{"shortDescription":"A static method call is dispatched polymorphically at runtime based on the argument types"}}},{"node":{"fields":{"slug":"/misconceptions/Java/StaticDispatch/","name":"StaticDispatch","pl":"Java"},"frontmatter":{"shortDescription":"The method to be called is determined by the static type"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SuperAlwaysHasParentheses/","name":"SuperAlwaysHasParentheses","pl":"Java"},"frontmatter":{"shortDescription":"To call a method on a superclass, parentheses are needed after the keyword super"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SuperNotFirstStatement/","name":"SuperNotFirstStatement","pl":"Java"},"frontmatter":{"shortDescription":"super() can be called anywhere in the constructor of a subclass"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/CallbackParametersInCaller/","name":"CallbackParametersInCaller","pl":"JavaScript"},"frontmatter":{"shortDescription":"Parameters of a callback function may be written as parameters of the caller function"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/FunctionAsValueWithParentheses/","name":"FunctionAsValueWithParentheses","pl":"JavaScript"},"frontmatter":{"shortDescription":"To use a function as a value, one needs to have parentheses after its name"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/FunctionsCannotBeImmediatelyInvoked/","name":"FunctionsCannotBeImmediatelyInvoked","pl":"JavaScript"},"frontmatter":{"shortDescription":"Functions cannot be called in the expression in which they are defined"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/NoFunctionCallsChaining/","name":"NoFunctionCallsChaining","pl":"JavaScript"},"frontmatter":{"shortDescription":"It is not allowed to chain function calls"}}},{"node":{"fields":{"slug":"/misconceptions/JavaScript/NumberOfParametersMatchArguments/","name":"NumberOfParametersMatchArguments","pl":"JavaScript"},"frontmatter":{"shortDescription":"Functions must be called with the same number of arguments as defined in their signature"}}},{"node":{"fields":{"slug":"/misconceptions/Python/CannotChainAttributeAccesses/","name":"CannotChainAttributeAccesses","pl":"Python"},"frontmatter":{"shortDescription":"Attribute accesses cannot be chained together"}}},{"node":{"fields":{"slug":"/misconceptions/Python/CannotChainAttributeToObjectInstantiation/","name":"CannotChainAttributeToObjectInstantiation","pl":"Python"},"frontmatter":{"shortDescription":"Method calls, and attribute accesses in general, cannot be chained to a constructor invocation."}}},{"node":{"fields":{"slug":"/misconceptions/Python/DeferredReturn/","name":"DeferredReturn","pl":"Python"},"frontmatter":{"shortDescription":"A return statement in the middle of a function doesn't return immediately"}}},{"node":{"fields":{"slug":"/misconceptions/Python/InitCreates/","name":"InitCreates","pl":"Python"},"frontmatter":{"shortDescription":"__init__ must create a new object"}}},{"node":{"fields":{"slug":"/misconceptions/Python/InitReturnsObject/","name":"InitReturnsObject","pl":"Python"},"frontmatter":{"shortDescription":"__init__ needs to return an object"}}},{"node":{"fields":{"slug":"/misconceptions/Python/ObjectsMustBeNamed/","name":"ObjectsMustBeNamed","pl":"Python"},"frontmatter":{"shortDescription":"A variable is needed to instantiate an object"}}},{"node":{"fields":{"slug":"/misconceptions/Python/OutsideInFunctionNesting/","name":"OutsideInFunctionNesting","pl":"Python"},"frontmatter":{"shortDescription":"Nested function calls are invoked outside in"}}},{"node":{"fields":{"slug":"/misconceptions/Python/ParenthesesOnlyIfArgument/","name":"ParenthesesOnlyIfArgument","pl":"Python"},"frontmatter":{"shortDescription":"() are optional for function calls without arguments"}}},{"node":{"fields":{"slug":"/misconceptions/Python/ReturnCall/","name":"ReturnCall","pl":"Python"},"frontmatter":{"shortDescription":"Return statements need () around the return value"}}},{"node":{"fields":{"slug":"/misconceptions/Python/ReturnUnwindsMultipleFrames/","name":"ReturnUnwindsMultipleFrames","pl":"Python"},"frontmatter":{"shortDescription":"A return statement can unwind multiple call stack frames"}}},{"node":{"fields":{"slug":"/misconceptions/Python/RightToLeftChaining/","name":"RightToLeftChaining","pl":"Python"},"frontmatter":{"shortDescription":"Chained accesses are invoked from right to left"}}},{"node":{"fields":{"slug":"/misconceptions/Scratch/BaseCaseNotNeeded/","name":"BaseCaseNotNeeded","pl":"Scratch"},"frontmatter":{"shortDescription":"Recursive computations do not necessarily need a base case"}}}]},"pls":{"edges":[{"node":{"frontmatter":{"id":"Java"}}},{"node":{"frontmatter":{"id":"JavaScript"}}},{"node":{"frontmatter":{"id":"Python"}}},{"node":{"frontmatter":{"id":"Scratch"}}}]},"textbooks":{"nodes":[{"frontmatter":{"title":"Category Theory for Programmers","home":"https://github.com/hmemcpy/milewski-ctfp-pdf","author":"Bartosz Milewski"},"parent":{"name":"ctp"}},{"frontmatter":{"title":"Compilers: Principles, Techniques, and Tools","home":"https://suif.stanford.edu/dragonbook/","author":"Alfred Aho, Ravi Sethi, Jeffrey Ullman, Monica S. Lam"},"parent":{"name":"dragon"}},{"frontmatter":{"title":"nLab","home":"https://ncatlab.org/nlab/show/HomePage","author":"David Corfield, David Roberts, Mike Shulman, Toby Bartels, Todd Trimble"},"parent":{"name":"nlab"}},{"frontmatter":{"title":"Objects-First with Java","home":"https://www.bluej.org/objects-first/","author":"David J. Barnes & Michael Kölling"},"parent":{"name":"ofj6"}},{"frontmatter":{"title":"Sprechen Sie Java","home":"https://ssw.jku.at/Misc/JavaBuch/","author":"Hanspeter Mössenböck"},"parent":{"name":"ssj4"}},{"frontmatter":{"title":"Types and Programming Languages","home":"https://www.cis.upenn.edu/~bcpierce/tapl/","author":"Benjamin C. Pierce"},"parent":{"name":"tapl"}}]}},"pageContext":{"concept":"Call","slug":"concepts/Call","wikipediaSummary":"","pl":"Scratch"}},
    "staticQueryHashes": ["3649515864","4169798128"]}