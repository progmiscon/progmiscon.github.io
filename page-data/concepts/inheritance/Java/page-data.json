{
    "componentChunkName": "component---src-templates-concept-js",
    "path": "/concepts/inheritance/Java/",
    "result": {"data":{"concept":{"slug":"concepts/Inheritance","frontmatter":{"wikipedia":"Inheritance_(object-oriented_programming)","shortDescription":"Inheritance is a way to define a class by reusing the definition of another class.","relatedConcepts":["Class","Member","Subtyping"],"text":null}},"misconceptions":{"totalCount":16,"edges":[{"node":{"fields":{"slug":"/misconceptions/Java/AbstractClassMustImplementAbstractMethod/","name":"AbstractClassMustImplementAbstractMethod","pl":"Java"},"frontmatter":{"shortDescription":"An abstract class must implement all abstract methods defined in its superclass"}}},{"node":{"fields":{"slug":"/misconceptions/Java/AbstractClassNoImplementation/","name":"AbstractClassNoImplementation","pl":"Java"},"frontmatter":{"shortDescription":"An abstract class cannot contain implemented methods"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassMustOverride/","name":"ConcreteClassMustOverride","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class needs to implement all abstract methods and override all concrete methods declared in its abstract superclasses"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementClassAbstract/","name":"ConcreteClassOnlyImplementClassAbstract","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class only needs to implement those abstract methods it inherits from abstract superclasses"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementDirectAbstract/","name":"ConcreteClassOnlyImplementDirectAbstract","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class only needs to implement abstract methods declared in its direct supertypes"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ConcreteClassOnlyImplementInterfaceAbstract/","name":"ConcreteClassOnlyImplementInterfaceAbstract","pl":"Java"},"frontmatter":{"shortDescription":"A concrete class only needs to implement those abstract methods it inherits from interfaces"}}},{"node":{"fields":{"slug":"/misconceptions/Java/ImplicitInterfaceImplementation/","name":"ImplicitInterfaceImplementation","pl":"Java"},"frontmatter":{"shortDescription":"Java implicitly produces implementations of any methods a class inherits from the interfaces it implements"}}},{"node":{"fields":{"slug":"/misconceptions/Java/InterfaceExtendClass/","name":"InterfaceExtendClass","pl":"Java"},"frontmatter":{"shortDescription":"An interface can extend a class"}}},{"node":{"fields":{"slug":"/misconceptions/Java/NoMethodInheritance/","name":"NoMethodInheritance","pl":"Java"},"frontmatter":{"shortDescription":"Subclasses inherit fields but not methods"}}},{"node":{"fields":{"slug":"/misconceptions/Java/PrivateAccessibleInSubclass/","name":"PrivateAccessibleInSubclass","pl":"Java"},"frontmatter":{"shortDescription":"Private members of a superclass are accessible from a subclass"}}},{"node":{"fields":{"slug":"/misconceptions/Java/StaticDispatch/","name":"StaticDispatch","pl":"Java"},"frontmatter":{"shortDescription":"The method to be called is determined by the static type"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SubtypeCompatibleWithSupertype/","name":"SubtypeCompatibleWithSupertype","pl":"Java"},"frontmatter":{"shortDescription":"A variable of a subtype can reference an object of a supertype"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SuperAlwaysHasParentheses/","name":"SuperAlwaysHasParentheses","pl":"Java"},"frontmatter":{"shortDescription":"To call a method on a superclass, parentheses are needed after the keyword super"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SuperNotFirstStatement/","name":"SuperNotFirstStatement","pl":"Java"},"frontmatter":{"shortDescription":"super() can be called anywhere in the constructor of a subclass"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SuperclassObjectAllocated/","name":"SuperclassObjectAllocated","pl":"Java"},"frontmatter":{"shortDescription":"When instantiating an object of a subclass, an object of a superclass is also allocated"}}},{"node":{"fields":{"slug":"/misconceptions/Java/SupertypeIncompatibleWithSubtype/","name":"SupertypeIncompatibleWithSubtype","pl":"Java"},"frontmatter":{"shortDescription":"A variable of a supertype cannot reference an object of a subtype"}}}]},"pls":{"edges":[{"node":{"frontmatter":{"id":"Java"}}},{"node":{"frontmatter":{"id":"JavaScript"}}},{"node":{"frontmatter":{"id":"Python"}}},{"node":{"frontmatter":{"id":"Scratch"}}}]},"textbooks":{"nodes":[{"frontmatter":{"title":"Category Theory for Programmers","home":"https://github.com/hmemcpy/milewski-ctfp-pdf","author":"Bartosz Milewski"},"parent":{"name":"ctp"}},{"frontmatter":{"title":"Compilers: Principles, Techniques, and Tools","home":"https://suif.stanford.edu/dragonbook/","author":"Alfred Aho, Ravi Sethi, Jeffrey Ullman, Monica S. Lam"},"parent":{"name":"dragon"}},{"frontmatter":{"title":"nLab","home":"https://ncatlab.org/nlab/show/HomePage","author":"David Corfield, David Roberts, Mike Shulman, Toby Bartels, Todd Trimble"},"parent":{"name":"nlab"}},{"frontmatter":{"title":"Objects-First with Java","home":"https://www.bluej.org/objects-first/","author":"David J. Barnes & Michael Kölling"},"parent":{"name":"ofj6"}},{"frontmatter":{"title":"Sprechen Sie Java","home":"https://ssw.jku.at/Misc/JavaBuch/","author":"Hanspeter Mössenböck"},"parent":{"name":"ssj4"}},{"frontmatter":{"title":"Types and Programming Languages","home":"https://www.cis.upenn.edu/~bcpierce/tapl/","author":"Benjamin C. Pierce"},"parent":{"name":"tapl"}}]}},"pageContext":{"concept":"Inheritance","slug":"concepts/Inheritance","wikipediaSummary":"","pl":"Java"}},
    "staticQueryHashes": ["3649515864","4169798128"]}