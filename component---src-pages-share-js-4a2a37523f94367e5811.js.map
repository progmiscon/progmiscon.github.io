{"version":3,"file":"component---src-pages-share-js-4a2a37523f94367e5811.js","mappings":"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","sources":["webpack://progmiscon-src/./src/pages/share.js","webpack://progmiscon-src/./src/components/image2.js","webpack://progmiscon-src/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React from \"react\";\nimport { Container, Header } from \"semantic-ui-react\";\nimport { Link } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Image2 from \"../components/image2\";\n\nconst SharePage = () => (\n  <Layout>\n    <SEO title='Share' />\n    <Container text style={{ marginTop: \"100px\", marginBottom: \"100px\" }}>\n      <Header as='h1' dividing>\n        <Header.Content>\n          Share &amp; Embed Misconceptions\n          <Header.Subheader>\n            A Curated Inventory of Programming Misconceptions\n          </Header.Subheader>\n        </Header.Content>\n      </Header>\n      <p>\n        We believe misconceptions are valuable. Progmiscon.org enables and\n        encourages sharing them.\n      </p>\n      <Header as='h2' dividing>\n        Stable Names\n      </Header>\n      <p>\n        Each misconception has a <strong>name</strong> (like{\" \"}\n        <code>ObjectsMustBeNamed</code>). We strive to keep these names short\n        but descriptive.\n      </p>\n      <p>\n        We continuously grow and improve our inventory of misconceptions. This\n        means that at some point we may want to rename a previously published\n        misconception. We try to minimize such renamings, and when we do rename\n        a misconception, we will keep the old name alive (and make it forward to\n        the new name), to ensure that references to progmiscon misconceptions\n        will never break.\n      </p>\n      <Header as='h2' dividing>\n        Each Programming Language has its own Misconceptions\n      </Header>\n      <p>\n        We organized the misconceptions by <strong>programming language</strong>\n        . Our inventory currently includes misconceptions for\n        <Link to='/misconceptions/Java'>Java</Link>,{\" \"}\n        <Link to='/misconceptions/JavaScript'>JavaScript</Link>, and{\" \"}\n        <Link to='/misconceptions/Python'>Python</Link>.\n      </p>\n      <p>\n        If a misconception exists for multiple programming languages, then it\n        has the same name for each language. For example:\n      </p>\n      <ul>\n        <li>\n          <Link to='/misconceptions/Java/NoAtomicExpression'>\n            Java / NoAtomicExpression\n          </Link>\n        </li>\n        <li>\n          <Link to='/misconceptions/JavaScript/NoAtomicExpression'>\n            JavaScript / NoAtomicExpression\n          </Link>\n        </li>\n        <li>\n          <Link to='/misconceptions/Python/NoAtomicExpression'>\n            Python / NoAtomicExpression\n          </Link>\n        </li>\n      </ul>\n      <Header as='h2' dividing>\n        Link to a Misconception\n      </Header>\n      <p>\n        Each misconception is presented on its own page, at a URL that looks as\n        follows:\n      </p>\n      <p>\n        <code>https://progmiscon.org/misconceptions/PL/MC</code>\n      </p>\n      <p>\n        where <code>PL</code> stands for the programming language (e.g.,{\" \"}\n        <code>Java</code>, <code>JavaScript</code>, or <code>Python</code>), and{\" \"}\n        <code>MC</code> stands for the name of a misconception (e.g.,{\" \"}\n        <code>ObjectsMustBeNamed</code>). This makes it easy to link to a\n        specific misconception from anywhere.\n      </p>\n      <p>For example, ObjectsMustBeNamed for Java is available at:</p>\n      <p>\n        <a href='https://progmiscon.org/misconceptions/Java/ObjectsMustBeNamed'>\n          https://progmiscon.org/misconceptions/Java/ObjectsMustBeNamed\n        </a>\n      </p>\n      <Header as='h2' dividing>\n        Post about a Misconception on Social Media\n      </Header>\n      <p>\n        If you post about a misconception on social media, include its link to\n        get a nice card in your post:\n      </p>\n      <p style={{ padding: \"5px\" }}>\n        <Image2\n          style={{ width: \"50%\", verticalAlign: \"text-top\" }}\n          className='ui image'\n          src='TwitterCard.png'\n        />\n        <Image2\n          style={{ width: \"50%\", verticalAlign: \"text-top\" }}\n          className='ui image'\n          src='FacebookCard.png'\n        />\n      </p>\n      <Header as='h2' dividing>\n        Embed a Misconception (iframe)\n      </Header>\n      <p>\n        You can include a misconception on your own web page in an iframe. Here\n        is an example:\n      </p>\n      <iframe\n        width='700'\n        height='640'\n        frameBorder='0'\n        allowFullScreen\n        src='https://progmiscon.org/iframe/misconceptions/Java/ObjectsMustBeNamed'\n        title='Misconception at progmiscon.org'\n      ></iframe>\n      <p>\n        To get this compact presentation of the misconception (which omits the\n        page header and footer, and the detailed discussion), use the URL for\n        iframe content:\n      </p>\n      <p>\n        <code>https://progmiscon.org/iframe/misconceptions/PL/MC</code>\n      </p>\n      <p>\n        As with any iframe, you can pick its size. Our iframe content works with\n        a relatively wide range of sizes. The iframe above is 700 by 640 pixels.\n        Here is the HTML snippet we used:\n      </p>\n      <pre\n        style={{\n          whiteSpace: \"pre-wrap\",\n          wordWrap: \"normal\",\n          display: \"block\",\n          overflow: \"auto\",\n        }}\n      >\n        {`<iframe\nwidth=\"700\"\nheight=\"640\"\nframeborder=\"0\"\nallowfullscreen\nsrc='https://progmiscon.org/iframe/misconceptions/Java/ObjectsMustBeNamed'\ntitle='Misconception at progmiscon.org'\n></iframe>`}\n      </pre>\n      <Header as='h2' dividing>\n        Retrieve the List of Misconceptions\n      </Header>\n      <p>\n        We provide a so-called \"static API\", a JSON file you can download that\n        contains the list of all misconceptions on this site.\n      </p>\n      <p>\n        <a href='/json/data.json'>https://progmiscon.org/json/data.json</a>\n      </p>\n      <p>The JSON file has the following structure:</p>\n      <pre>\n        {`{\n  \"meta\": {\n    \"source\": \"https://progmiscon.org\",\n    \"publicationDate\": \"2020-12-29T14:53:47.391Z\"\n  },\n  \"pls\": [\n    \"Java\",\n    \"JavaScript\",\n    \"Python\"\n  ],\n  \"concepts\": [\n    {\n      \"name\": \"AccessModifier\"\n    },\n    {\n      \"name\": \"Allocation\"\n    },\n...\n  ],\n  \"misconceptions\": [\n    {\n      \"name\": \"PlusConcatenatesNumbers\",\n      \"pl\": \"Python\",\n      \"shortDescription\": \"The plus operator can concatenate strings and numbers\",\n      \"concepts\": [\n        \"Text\",\n        \"Sequence\",\n        \"Number\",\n        \"Expression\",\n        \"Operator\"\n      ],\n      \"status\": \"draft\"\n    },\n    {\n      \"name\": \"NoSequenceRepetition\",\n      \"pl\": \"Python\",\n      \"shortDescription\": \"There is no operator that repeats sequences\",\n      \"concepts\": [\n        \"Text\",\n        \"Sequence\",\n        \"Number\",\n        \"Repetition\"\n      ],\n      \"status\": \"draft\"\n    },\n...\n  ]\n}\n`}\n      </pre>\n      <p>\n        The JSON file contains the list of programming languages for which we\n        have misconceptions, the list of concepts that the misconceptions relate\n        to, and the list of misconceptions.\n      </p>\n      <p>\n        For each misconception it contains its name and programming language,\n        its short description (a descriptive phrase without formatting), the\n        list of concepts it is related to, and its status. The status is either{\" \"}\n        <code>public</code> (fully documented) or <code>draft</code>{\" \"}\n        (incompletely documented).\n      </p>\n    </Container>\n  </Layout>\n);\n\nexport default SharePage;\n","import React, { useMemo } from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport PropTypes from \"prop-types\";\n\nconst Image2 = ({ src, ...rest }) => {\n  const data = useStaticQuery(graphql`\n    {\n      images: allFile(\n        filter: { internal: { mediaType: { regex: \"/image/\" } } }\n      ) {\n        edges {\n          node {\n            relativePath\n            extension\n            publicURL\n            childImageSharp {\n              gatsbyImageData(width: 600, layout: CONSTRAINED)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = useMemo(\n    () => data.images.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  if (!match) return null;\n\n  const { node: { childImageSharp, publicURL, extension } = {} } = match;\n\n  if (extension === \"svg\" || !childImageSharp) {\n    return <img src={publicURL} {...rest} />;\n  }\n\n  return <GatsbyImage image={childImageSharp.gatsbyImageData} {...rest} />;\n};\n\nImage2.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string,\n};\n\nexport default Image2;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };"],"names":["SharePage","React","Layout","SEO","title","Container","text","style","marginTop","marginBottom","Header","as","dividing","Content","Subheader","Link","to","href","padding","Image2","width","verticalAlign","className","src","height","frameBorder","allowFullScreen","whiteSpace","wordWrap","display","overflow","_ref","rest","_objectWithoutProperties","_excluded","data","useStaticQuery","match","useMemo","images","edges","find","_ref2","node","relativePath","childImageSharp","publicURL","extension","GatsbyImage","Object","assign","image","gatsbyImageData","e","t","o","r","i","getOwnPropertySymbols","n","length","indexOf","propertyIsEnumerable","call"],"sourceRoot":""}